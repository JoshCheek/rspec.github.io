<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RSpec</title>
  <subtitle>The Official RSpec Blog</subtitle>
  <id>http://rspec.info/blog</id>
  <link href="http://rspec.info/blog"/>
  <link href="http://rspec.info/blog/blog/feed.xml" rel="self"/>
  <updated>2014-09-03T17:00:00-07:00</updated>
  <author>
    <name>The RSpec Core Team</name>
  </author>
  <entry>
    <title>RSpec 3.1 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/09/rspec-3-1-has-been-released/"/>
    <id>http://rspec.info/blog/2014/09/rspec-3-1-has-been-released/</id>
    <published>2014-09-03T17:00:00-07:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 3.1 has just been released! Given our commitment to
&lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, this should be a trivial
upgrade for anyone already using RSpec 3.0, but if we did introduce
any regressions, please let us know, and we'll get a patch release
out with a fix ASAP.&lt;/p&gt;

&lt;p&gt;RSpec continues to be a community-driven project with contributors
from all over the world. This release includes 647 commits from 190
pull requests from 47 different contributors.&lt;/p&gt;

&lt;p&gt;Thank you to everyone who helped make this release happen!&lt;/p&gt;

&lt;h2 id="notable-changes"&gt;Notable Changes&lt;/h2&gt;

&lt;h3 id="core-backtrace-filtering-changes"&gt;Core: Backtrace filtering changes&lt;/h3&gt;

&lt;p&gt;In RSpec 2.x and RSpec 3.0, the default backtrace filtering configuration
excluded lines from gems from printed backraces. We &lt;a href="https://github.com/rspec/rspec-core/issues/1536#issuecomment-43521129"&gt;got some
feedback&lt;/a&gt;
that this was unhelpful and have removed &lt;code&gt;/gems/&lt;/code&gt; from the default
backtrace filter patterns. In RSpec 3.1, lines from gems will be
included backtraces, but lines from RSpec itself will continue to be
excluded. Of course, if you want still gems to be excluded, you can easily
add this pattern back yourself:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backtrace_exclusion_patterns&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sr"&gt;/gems/&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, we've added a new API to make it easy to filter out one
or more specific gems:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_gems_from_backtrace&lt;/span&gt; &lt;span class="s2"&gt;"rack"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rake"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="core-new---exclude-pattern-option"&gt;Core: New &lt;code&gt;--exclude-pattern&lt;/code&gt; option&lt;/h3&gt;

&lt;p&gt;RSpec 3.1 has a new &lt;code&gt;--exclude-pattern&lt;/code&gt; option that is the inverse of
&lt;code&gt;--pattern&lt;/code&gt;. This allows you to exclude particular files, so that,
for example, you can load and run all spec files except those from
a particular directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="s2"&gt;"spec/**/*_spec.rb"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="s2"&gt;"spec/acceptance/**/*_spec.rb"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rake task definition API supports this option now, too, so it is
easy to define tasks that run all specs but those from one directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# Rakefile&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/core/rake_task'&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Run all but the acceptance specs"&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RakeTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all_but_acceptance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exclude_pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"spec/acceptance/**/*_spec.rb"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to John Gesimondo for suggesting and
&lt;a href="https://github.com/rspec/rspec-core/pull/1651"&gt;implementing&lt;/a&gt;
this new feature!&lt;/p&gt;

&lt;h3 id="core-can-now-be-used-standalone-without-configuration"&gt;Core: Can now be used standalone without configuration&lt;/h3&gt;

&lt;p&gt;RSpec got split up into separate gems (core, expecations and mocks) in RSpec 2.0,
which allows users to &lt;a href="/blog/2012/07/mixing-and-matching-parts-of-rspec"&gt;mix and
match parts of RSpec&lt;/a&gt;
with other testing libraries like Minitest. Tom Stuart pointed out that it
wasn't as easy to use just rspec-core as it could beâ€“specifically, in RSpec 3.0 and
before, if you didn't explicitly configure rspec-core to not use
rspec-expectations and rspec-mocks, it assumed they were available,
tried to load them, and gave you an error if they were not.&lt;/p&gt;

&lt;p&gt;In RSpec 3.1, we've rectified this. rspec-expectations and rspec-mocks
will still both be used by default if available, but it they are not
available and you haven't configured anything, rspec-core will work just
fine.&lt;/p&gt;

&lt;p&gt;Thanks to Sam Phippen for &lt;a href="https://github.com/rspec/rspec-core/pull/1615"&gt;implementating&lt;/a&gt; this improvement.&lt;/p&gt;

&lt;h3 id="core-warnings-flag-no-longer-defaults-to-true-in-generated-files"&gt;Core: Warnings flag no longer defaults to true in generated files&lt;/h3&gt;

&lt;p&gt;In RSpec 3.0, we put &lt;code&gt;--warnings&lt;/code&gt; in the generated &lt;code&gt;.rspec&lt;/code&gt; file. We
did that to encourage gem authors to make their gems warning-free (as
gems that issue warnings inhibit users from using Ruby's warning mode).
However, the rails ecosystem has generally not strived to have warning-free
code, and on new rails projects, this led to a &lt;em&gt;ton&lt;/em&gt; of confusing warnings.&lt;/p&gt;

&lt;p&gt;In RSpec 3.1, we learned from the community feedback on this and have removed
&lt;code&gt;--warnings&lt;/code&gt; from the generated &lt;code&gt;.rspec&lt;/code&gt; file. In non-rails projects, &lt;code&gt;rspec --init&lt;/code&gt;
will include &lt;code&gt;config.warnings = true&lt;/code&gt; in the commented-out section of recommended
settings in &lt;code&gt;spec_helper.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to Andrew Hooker for &lt;a href="https://github.com/rspec/rspec-core/pull/1572"&gt;making this change&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="expectations-new-haveattributes-matcher"&gt;Expectations: New &lt;code&gt;have_attributes&lt;/code&gt; matcher&lt;/h3&gt;

&lt;p&gt;This new matcher makes it easy to match an object based on its attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Coen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Coen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;age: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also aliased to &lt;code&gt;an_object_having_attributes&lt;/code&gt;, which is particularly
useful in composed matcher expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Coen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Daphne"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="n"&gt;an_object_having_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Coen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="ss"&gt;age: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;an_object_having_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Daphne"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;age: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can also be used as an argument matcher for a message expectation:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_gateway&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send_receipt&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;an_object_having_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"foo@example.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Adam Farhi for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/571"&gt;implementing&lt;/a&gt;
this new matcher.&lt;/p&gt;

&lt;h3 id="expectations-block-matchers-can-now-be-used-in-compound-expressions"&gt;Expectations: Block matchers can now be used in compound expressions&lt;/h3&gt;

&lt;p&gt;RSpec 3.0 gained the ability to use &lt;a href="/blog/2014/01/new-in-rspec-3-composable-matchers#compound_matcher_expressions"&gt;compound matcher
expressions&lt;/a&gt;.
However, it didn't work with block expectations because we had internal
changes that needed to be made to ensure the block is only executed
once as one would expect. We've addressed this in 3.1, which allows an
expression like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="expectations-new-definenegatedmatcher-api"&gt;Expectations: New &lt;code&gt;define_negated_matcher&lt;/code&gt; API&lt;/h3&gt;

&lt;p&gt;This new API provides a means to define a negated version of an existing matcher:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# define a negated form of `include`...&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_negated_matcher&lt;/span&gt; &lt;span class="ss"&gt;:exclude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:include&lt;/span&gt;

&lt;span class="c1"&gt;# ...which allows you to write:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odd_numbers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ...rather than:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odd_numbers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On its own, this doesn't buy you much. However, it really comes in handy
when dealing with composed or compound matcher expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;adults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Town&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Springfield"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;adults&lt;/span&gt;
&lt;span class="n"&gt;marge&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Marge"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bart&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bart"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adults&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Adam Farhi for helping with the
&lt;a href="https://github.com/rspec/rspec-expectations/pull/618"&gt;implementation&lt;/a&gt;
of this feature.&lt;/p&gt;

&lt;h3 id="expectations-custom-matcher-chained-modifiers-now-included-in-generated-description"&gt;Expectations: Custom matcher chained modifiers now included in generated description&lt;/h3&gt;

&lt;p&gt;The custom matcher DSL allows you to define a fluent interface using
&lt;code&gt;chain&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="ss"&gt;:be_smaller_than&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;and_bigger_than&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="vi"&gt;@min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;@min&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# usage:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_smaller_than&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_bigger_than&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 2.x and 3.0, the chained part was not included in failure messages:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Failure/Error: expect(5).to be_smaller_than(10).and_bigger_than(7)
  expected 5 to be smaller than 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RSpec 3.1 can include the chained part in the failure message:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Failure/Error: expect(5).to be_smaller_than(10).and_bigger_than(7)
  expected 5 to be smaller than 10 and bigger than 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â€¦but only if you enable this behavior with a config option:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;expectations&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;expectations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include_chain_clauses_in_custom_matcher_descriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This config option defaults to &lt;code&gt;false&lt;/code&gt; for backwards compatibility.
We plan to always enable it in RSpec 4.&lt;/p&gt;

&lt;p&gt;Thanks to Dan Oved for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/600"&gt;implementing&lt;/a&gt;
this improvement!&lt;/p&gt;

&lt;h3 id="mocks-new-spy-methods"&gt;Mocks: New &lt;code&gt;*_spy&lt;/code&gt; methods&lt;/h3&gt;

&lt;p&gt;RSpec 2.14 added support for using test doubles as spies, which allow
you to set an expectation that a message was received after the fact:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;spy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# do something with spy&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we stubbed &lt;code&gt;foo&lt;/code&gt; here. This is necessary because doubles are
strict by default â€“ meaning that they will raise an error when they
receive an unexpected message. Unfortunately, this forces a bit of
duplication on you as you have to declare the method twice (stubbing it
once before and expecting it was received after).&lt;/p&gt;

&lt;p&gt;You can get around this by using &lt;code&gt;as_null_object&lt;/code&gt; which makes a double
"loose" rather than strict, allowing it to receive any message:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;spy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;as_null_object&lt;/span&gt;
&lt;span class="c1"&gt;# do something with spy&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pattern is useful enough that in RSpec 3.1, we've added new methods
to declare spies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;spy&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# equivalent to double(...).as_null_object&lt;/span&gt;
&lt;span class="n"&gt;instance_spy&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# equivalent to instance_double(...).as_null_object&lt;/span&gt;
&lt;span class="n"&gt;class_spy&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# equivalent to class_double(...).as_null_object&lt;/span&gt;
&lt;span class="n"&gt;object_spy&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# equivalent to object_double(...).as_null_object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Justin Searls for &lt;a href="https://github.com/rspec/rspec-mocks/issues/636"&gt;bringing
up this issue&lt;/a&gt; and
Sam Phippen for
&lt;a href="https://github.com/rspec/rspec-mocks/pull/671"&gt;implementing&lt;/a&gt; the new
methods.&lt;/p&gt;

&lt;h3 id="mocks-new-andwraporiginal-api"&gt;Mocks: New &lt;code&gt;and_wrap_original&lt;/code&gt; API&lt;/h3&gt;

&lt;p&gt;This new API allows you to easily decorate a particular existing method on a
particular object just for the duration of the current example. The
original method is yielded to your block as the first argument (before
the args of the actual method call).&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_client&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_users&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_wrap_original&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;original_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;original_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# truncate the response to the first 10 users&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Jon Rowe for
&lt;a href="https://github.com/rspec/rspec-mocks/pull/762"&gt;implementing&lt;/a&gt; this
feature.&lt;/p&gt;

&lt;h3 id="rails-rails-42-support"&gt;Rails: Rails 4.2 support&lt;/h3&gt;

&lt;p&gt;rspec-rails 3.1 will officially support Rails 4.2. Aaron Kromer has been
doing a great job getting RSpec 3.1 ready for Rails 4.2. This includes
a generator &lt;a href="https://github.com/rspec/rspec-rails/pull/1155"&gt;provided by Abdelkader
Boudih&lt;/a&gt; for ActiveJob.&lt;/p&gt;

&lt;h3 id="rails-generated-railshelperrb-no-longer-auto-loads-specsupport-files-by-default"&gt;Rails: Generated &lt;code&gt;rails_helper.rb&lt;/code&gt; no longer auto-loads &lt;code&gt;spec/support&lt;/code&gt; files by default&lt;/h3&gt;

&lt;p&gt;Aaron has also &lt;a href="https://github.com/rspec/rspec-rails/pull/1137"&gt;made a small change&lt;/a&gt;
to the generator for &lt;code&gt;rails_helper.rb&lt;/code&gt;.  Previously, it contained some code that
would automatically load all files under &lt;code&gt;spec/support&lt;/code&gt;. That code is still
there but is now commented out.  We've found that it helps prevent load time
bloat to manually require the support files that are needed, rather than
always loading all of them.&lt;/p&gt;

&lt;p&gt;Of course, if you prefer the convenience of the old way, that's a reasonable
tradeoff, and you can easily uncomment this bit of code.&lt;/p&gt;

&lt;h2 id="stats"&gt;Stats&lt;/h2&gt;

&lt;h3 id="rspec-core"&gt;rspec-core:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 176&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 50&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;20 contributors&lt;/strong&gt;: Aaron Kromer, Alex Tan, Andrew Hooker, Christian Treppo, Colin Jones, Daniela Wellisz, Dominic Muller, Evgeny Zislis, Gary Fleshman, Jimmy Cuadra, John Gesimondo, Jon Rowe, Mark Lorenz, Max Lincoln, Myron Marston, Paul Cortens, Prem Sichanugrist, Sam Phippen, Su Zhang (å¼µç”¦), tomykaira&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations"&gt;rspec-expectations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 149&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 40&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;14 contributors&lt;/strong&gt;: Aaron Kromer, Abdelkader Boudih, Adam Farhi, Alex Sunderland, Chris Griego, Dennis Taylor, Hao Su, Jon Rowe, Myron Marston, Pritesh Jain, Sam Phippen, Xavier Shay, fimmtiu, oveddan&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks"&gt;rspec-mocks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 118&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 39&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;13 contributors&lt;/strong&gt;: Aaron Kromer, Chris Griego, Dennis Taylor, Eugene Kenny, Igor Kapkov, Jimmy Cuadra, Jon Rowe, Karthik T, Myron Marston, Oliver Martell NÃºÃ±ez, Sam Phippen, Thomas Brand, Xavier Shay&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails"&gt;rspec-rails:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 137&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 38&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;16 contributors&lt;/strong&gt;: Aaron Kromer, Abdelkader Boudih, Alex Rothenberg, Andre Arko &amp;amp; Doc Ritezel, AndrÃ© Arko, Bradley Schaefer, Diego Plentz, Jon Rowe, Josh Kalderimis, Juan GonzÃ¡lez, Kosmas Chatzimichalis, Michael E. Gruen, Myron Marston, Sam Phippen, Thomas Kriechbaumer, joker1007&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support"&gt;rspec-support:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 67&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 23&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;8 contributors&lt;/strong&gt;: Aaron Kromer, Ben Langfeld, Jimmy Cuadra, Jon Rowe, Myron Marston, Pritesh Jain, Sam Phippen, Xavier Shay&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;

&lt;h3 id="api-docs"&gt;API Docs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/gems/rspec-core"&gt;http://rubydoc.info/gems/rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/gems/rspec-expectations"&gt;http://rubydoc.info/gems/rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/gems/rspec-mocks"&gt;http://rubydoc.info/gems/rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/gems/rspec-rails"&gt;http://rubydoc.info/gems/rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cucumber-features"&gt;Cucumber Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-core"&gt;http://relishapp.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-expectations"&gt;http://relishapp.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-mocks"&gt;http://relishapp.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-rails"&gt;http://relishapp.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-310"&gt;rspec-core-3.1.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.0.4...v3.1.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update files generated by &lt;code&gt;rspec --init&lt;/code&gt; so that warnings are enabled
in commented out section of &lt;code&gt;spec_helper&lt;/code&gt; rather than &lt;code&gt;.rspec&lt;/code&gt; so users
have to consciously opt-in to the setting. (Andrew Hooker, #1572)&lt;/li&gt;
  &lt;li&gt;Update &lt;code&gt;spec_helper&lt;/code&gt; generated by &lt;code&gt;rspec --init&lt;/code&gt; so that it sets the new
rspec-expectations &lt;code&gt;include_chain_clauses_in_custom_matcher_descriptions&lt;/code&gt;
config option (which will be on by default in RSpec 4) and also sets the
rspec-mocks &lt;code&gt;verify_partial_doubles&lt;/code&gt; option (which will also default
to on in RSpec 4). (Myron Marston, #1647)&lt;/li&gt;
  &lt;li&gt;Provide an &lt;code&gt;inspect&lt;/code&gt; output for example procsy objects (used in around
hooks) that doesn't make them look like procs. (Jon Rowe, #1620)&lt;/li&gt;
  &lt;li&gt;Remove a few unneeded &lt;code&gt;require&lt;/code&gt; statements from
&lt;code&gt;rspec/core/rake_task.rb&lt;/code&gt;, making it even more lighterweight.
(Myron Marston, #1640)&lt;/li&gt;
  &lt;li&gt;Allow rspec-core to be used when neither rspec-mocks or
rspec-expectations are installed, without requiring any
user configuration. (Sam Phippen, Myron Marston, #1615)&lt;/li&gt;
  &lt;li&gt;Don't filter out gems from backtraces by default. (The RSpec
gems will still be filtered). User feedback has indicated
that including gems in default backtraces will be useful.
(Myron Marston, #1641)&lt;/li&gt;
  &lt;li&gt;Add new &lt;code&gt;config.filter_gems_from_backtrace "rack", "rake"&lt;/code&gt; API
to easily filter the named gems from backtraces. (Myron Marston, #1682)&lt;/li&gt;
  &lt;li&gt;Fix default backtrace filters so that the RSpec binary is
excluded when installing RSpec as a bundler &lt;code&gt;:git&lt;/code&gt; dependency.
(Myron Marston, #1648)&lt;/li&gt;
  &lt;li&gt;Simplify command generated by the rake task so that it no longer
includes unnecessary &lt;code&gt;-S&lt;/code&gt;. (Myron Marston, #1559)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;--exclude-pattern&lt;/code&gt; CLI option, &lt;code&gt;config.exclude_pattern =&lt;/code&gt; config
option and &lt;code&gt;task.exclude_pattern =&lt;/code&gt; rake task config option. Matching
files will be excluded. (John Gesimondo, Myron Marston, #1651, #1671)&lt;/li&gt;
  &lt;li&gt;When an around hook fails to execute the example, mark it as
pending (rather than passing) so the user is made aware of the
fact that the example did not actually run. (Myron Marston, #1660)&lt;/li&gt;
  &lt;li&gt;Remove dependency on &lt;code&gt;FileUtils&lt;/code&gt; from the standard library so that users do
not get false positives where their code relies on it but they are not
requiring it. (Sam Phippen, #1565)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix rake task &lt;code&gt;t.pattern =&lt;/code&gt; option so that it does not run all specs
when it matches no files, by passing along a &lt;code&gt;--pattern&lt;/code&gt; option to
the &lt;code&gt;rspec&lt;/code&gt; command, rather than resolving the file list and passing
along the files individually. (Evgeny Zislis, #1653)&lt;/li&gt;
  &lt;li&gt;Fix rake task default pattern so that it follows symlinks properly.
(Myron Marston, #1672)&lt;/li&gt;
  &lt;li&gt;Fix default pattern used with &lt;code&gt;rspec&lt;/code&gt; command so that it follows
symlinks properly. (Myron Marston, #1672)&lt;/li&gt;
  &lt;li&gt;Change how we assign constant names to example group classes so that
it avoids a problem with &lt;code&gt;describe "Core"&lt;/code&gt;. (Daniela Wellisz, #1679)&lt;/li&gt;
  &lt;li&gt;Handle rendering exceptions that have a different encoding than that
of their original source file. (Jon Rowe, #1681)&lt;/li&gt;
  &lt;li&gt;Allow access to message_lines without colour for failed examples even
when they're part of a shared example group. (tomykaira, #1689)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-310"&gt;rspec-expectations-3.1.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.0.4...v3.1.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;have_attributes&lt;/code&gt; matcher, that passes if actual's attribute
values match the expected attributes hash:
&lt;code&gt;Person = Struct.new(:name, :age)&lt;/code&gt;
&lt;code&gt;person = Person.new("Bob", 32)&lt;/code&gt;
&lt;code&gt;expect(person).to have_attributes(:name =&amp;gt; "Bob", :age =&amp;gt; 32)&lt;/code&gt;.
(Adam Farhi, #571)&lt;/li&gt;
  &lt;li&gt;Extended compound matcher support to block matchers, for cases like:
&lt;code&gt;expect { ... }.to change { x }.to(3).and change { y }.to(4)&lt;/code&gt;. (Myron
Marston, #567)&lt;/li&gt;
  &lt;li&gt;Include chained methods in custom matcher description and failure message
when new &lt;code&gt;include_chain_clauses_in_custom_matcher_descriptions&lt;/code&gt; config
option is enabled. (Dan Oved, #600)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;thrice&lt;/code&gt; modifier to &lt;code&gt;yield_control&lt;/code&gt; matcher as a synonym for
&lt;code&gt;exactly(3).times&lt;/code&gt;. (Dennis Taylor, #615)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Matchers.define_negated_matcher&lt;/code&gt;, which defines a negated
version of the named matcher. (Adam Farhi, Myron Marston, #618)&lt;/li&gt;
  &lt;li&gt;Document and support negation of &lt;code&gt;contain_exactly&lt;/code&gt;/&lt;code&gt;match_array&lt;/code&gt;.
(Jon Rowe, #626).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rename private &lt;code&gt;LegacyMacherAdapter&lt;/code&gt; constant to &lt;code&gt;LegacyMatcherAdapter&lt;/code&gt;
to fix typo. (Abdelkader Boudih, #563)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;all&lt;/code&gt; matcher so that it fails properly (rather than raising a
&lt;code&gt;NoMethodError&lt;/code&gt;) when matched against a non-enumerable. (Hao Su, #622)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-310"&gt;rspec-mocks-3.1.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.0.4...v3.1.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add spying methods (&lt;code&gt;spy&lt;/code&gt;, &lt;code&gt;Ã¬nstance_spy&lt;/code&gt;, &lt;code&gt;class_spy&lt;/code&gt; and &lt;code&gt;object_spy&lt;/code&gt;)
which create doubles as null objects for use with spying in testing. (Sam
Phippen, #671)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;have_received&lt;/code&gt; matcher will raise "does not implement" errors correctly when
used with verifying doubles and partial doubles. (Xavier Shay, #722)&lt;/li&gt;
  &lt;li&gt;Allow matchers to be used in place of keyword arguments in &lt;code&gt;with&lt;/code&gt;
expectations. (Xavier Shay, #726)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;thrice&lt;/code&gt; modifier to message expectation interface as a synonym
for &lt;code&gt;exactly(3).times&lt;/code&gt;. (Dennis Taylor, #753)&lt;/li&gt;
  &lt;li&gt;Add more &lt;code&gt;thrice&lt;/code&gt; synonyms e.g. &lt;code&gt;.at_least(:thrice)&lt;/code&gt;, &lt;code&gt;.at_most(:thrice)&lt;/code&gt;,
&lt;code&gt;receive(...).thrice&lt;/code&gt; and &lt;code&gt;have_received(...).thrice&lt;/code&gt;. (Jon Rowe, #754)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;and_wrap_original&lt;/code&gt; modifier for partial doubles to mutate the
response from a method. (Jon Rowe, #762)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bugfixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove &lt;code&gt;any_number_of_times&lt;/code&gt; from &lt;code&gt;any_instance&lt;/code&gt; recorders that were
erroneously causing mention of the method in documentation. (Jon Rowe, #760)&lt;/li&gt;
  &lt;li&gt;Prevent included modules being detected as prepended modules on Ruby 2.0.
(Eugene Kenny, #771)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-310"&gt;rspec-rails-3.1.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.0.2...v3.1.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switch to using the &lt;code&gt;have_http_status&lt;/code&gt; matcher in spec generators. (Aaron Kromer, #1086)&lt;/li&gt;
  &lt;li&gt;Update &lt;code&gt;rails_helper&lt;/code&gt; generator to allow users to opt-in to auto-loading
&lt;code&gt;spec/support&lt;/code&gt; files instead of forcing it upon them. (Aaron Kromer, #1137)&lt;/li&gt;
  &lt;li&gt;Include generator for &lt;code&gt;ActiveJob&lt;/code&gt;. (Abdelkader Boudih, #1155)&lt;/li&gt;
  &lt;li&gt;Improve support for non-ActiveRecord apps by not loading ActiveRecord related
settings in the generated &lt;code&gt;rails_helper&lt;/code&gt;. (Aaron Kromer, #1150)&lt;/li&gt;
  &lt;li&gt;Remove Ruby warnings as a suggested configuration. (Aaron Kromer, #1163)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix controller route lookup for Rails 4.2. (Tomohiro Hashidate, #1142)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>RSpec Team Changes</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/06/rspec-team-changes/"/>
    <id>http://rspec.info/blog/2014/06/rspec-team-changes/</id>
    <published>2014-06-12T17:00:00-07:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://www.andylindeman.com/"&gt;Andy Lindeman&lt;/a&gt;, who has been working on RSpec
with me for a couple years, has decided to retire from the RSpec core team.
In his current job at GitHub, he's using Ruby and Rails much less than
he used to. It has been really great to have the chance to work with Andy
over the last few years. I can't thank him enough. His work on
rspec-rails in particular (since he's been lead maintainer) has been
awesome. We wish him well in his future endeavors.&lt;/p&gt;

&lt;p&gt;Meanwhile, &lt;a href="http://aaronkromer.com/"&gt;Aaron Kromer&lt;/a&gt;, who joined the team
a few months back, has volunteered to take responsibility as lead
rspec-rails maintainer. Aaron's already been doing a wonderful job.&lt;/p&gt;

&lt;p&gt;Lastly, we have one more new team member â€“ &lt;a href="http://yujinakayama.me/"&gt;Yuji Nakayama&lt;/a&gt;.
If you've upgraded a code base from RSpec 2 to RSpec 3 you've probably
benefited from Yuji's great work on &lt;a href="http://yujinakayama.me/transpec/"&gt;transpec&lt;/a&gt;.
We're excited to have Yuji on the team.&lt;/p&gt;

&lt;p&gt;Please join me in thanking Andy, and congratulating Aaron and Yuji!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 2.99.0 and 3.0.0 have been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/06/rspec-2-99-0-and-3-0-0-have-been-released/"/>
    <id>http://rspec.info/blog/2014/06/rspec-2-99-0-and-3-0-0-have-been-released/</id>
    <published>2014-06-01T17:00:00-07:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 2.99.0 and 3.0.0 have been released! RSpec 3 has tons of &lt;a href="/blog/2014/05/notable-changes-in-rspec-3"&gt;great new
features&lt;/a&gt;. RSpec 2.99 is
part of the &lt;a href="https://relishapp.com/rspec/docs/upgrade"&gt;recommended upgrade path&lt;/a&gt;
for projects currently on RSpec 2.x.&lt;/p&gt;

&lt;p&gt;RSpec 3 is the work of many, many people, and it never would have happened without
the community contributing to it. Special thanks to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The RSpec core team: Aaron Kromer, Andy Lindeman, Bradley Schaefer, Jon Rowe, Sam Phippen and Xavier Shay.
It's fantastic to work with all of you.&lt;/li&gt;
  &lt;li&gt;Yuji Nakayama, for creating &lt;a href="http://yujinakayama.me/transpec/"&gt;transpec&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The folks who stepped forward to maintain the extracted gems:
    &lt;ul&gt;
      &lt;li&gt;Peter Alfvin â€“ &lt;a href="https://github.com/rspec/rspec-its"&gt;rspec-its&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Hugo BaraÃºna â€“ &lt;a href="https://github.com/rspec/rspec-collection_matchers"&gt;rspec-collection_matchers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Thomas Holmes â€“ &lt;a href="https://github.com/rspec/rspec-activemodel-mocks"&gt;rspec-activemodel-mocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Abdelkader Boudih â€“ &lt;a href="https://github.com/rspec/rspec-autotest"&gt;rspec-autotest&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Everyone who contributed to RSpec 3. Their names are all listed below.&lt;/li&gt;
  &lt;li&gt;Everyone who tried out the betas and the release candidate. Getting bug reports early,
before 3.0 final was out, really helped us make it a solid release, so thank you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-numbers"&gt;The numbers&lt;/h2&gt;

&lt;p&gt;I thought it'd be fun to extract some stats from the git logs to get an idea of how much work went into RSpec 3.
I put together a &lt;a href="https://github.com/rspec/rspec-dev/pull/71"&gt;rake task&lt;/a&gt; to do this, and the raw numbers surprised me:&lt;/p&gt;

&lt;h3 id="across-all-repos"&gt;Across all repos:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 4069&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 882&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;122 contributors&lt;/strong&gt;: Aaron Blew, Aaron Kromer, AbuSabah, Adam Farhi, Adarsh Pandit, Adrian CB, Adrian Gonzalez, Alex Peattie, Alex Rothenberg, Alex Yaremyuk, Alexander Clark, Alexey Fedorov, Alexey Pisarenko, Andy Henson, Andy Lindeman, Andy Waite, Arthur Neves, Arthur Nogueira Neves, Ashish Dixit, Ben Hamill, Ben Hoskings, Ben Moss, Ben Orenstein, Billy, Bradley Schaefer, Brandon Turner, Brian Fontenot, Cezar Halmagean, Christof, Claudio B., Damian Galarza, Daniel Fone, Daniel Murphy, Darryl Pogue, David Chelimsky, David Dollar, David Long, Eloy Espinaco, Erik Michaels-Ober, Federico Ravasio, Florian Thomas, Fujimura Daisuke, Giovanni Cappellotto, Giuseppe Capizzi, Grant Hollingworth, Guilherme Carvalho, Hendy Tanata, Hugo BaraÃºna, Ivo Wever, Jakub Racek, Jared Norman, Jay Hayes, Jeff Wallace, Johannes / universa1, John Feminella, John Firebaugh, John Voloski, Jon Rowe, Jonathan del Strother, Josef Å imÃ¡nek, Justin Coyne, Karthik Kastury, Katsuhiko Nishimra, Keiji, Kelly Stannard, Kenrick Chien, Lucas Mazza, Marc-Andre Lafortune, MasterLambaster, Matijs van Zuijlen, Matt Sanders, Matthew M. Boedicker, Mauricio Linhares, Michael Gee, Michael de Silva, Michi Huber, Myron Marston, Nerian, Nick DeLuca, Olle Jonsson, Oren Dobzinski, Paavo Leinonen, Parker Selbert, Paul Annesley, Pedro Gimenez, Pete Higgins, Peter Alfvin, Peter Inglesby, Postmodern, Prathamesh Sonpatki, Puneet Goyal, RenÃ© FÃ¶hring, Reyes Yang, Rodrigo Rosenfeld Rosas, Ryo Nakamura, Salimane Adjao Moustapha, Sam Phippen, Sergey Pchelincev, Stephen Best, Steve Richert, Stuart Hicks, Tay Ray Chuan, Thijs Wouters, Thomas Drake-Brockman, Thomas Holmes, Thomas Stratmann, Tim Cowlishaw, Tim Watson, Tom Stuart, Tom Ward, Travis Herrick, Vinicius Horewicz, Vipul A M, Xavier Shay, Yoshimi, Yuji Nakayama, lucapette, maxlinc, modocache, sanemat, thepoho, vanstee&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec"&gt;rspec:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 23&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 3&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5 contributors&lt;/strong&gt;: Aaron Kromer, Andy Lindeman, Jon Rowe, Josef Å imÃ¡nek, Myron Marston&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core"&gt;rspec-core:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 1589&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 345&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;47 contributors&lt;/strong&gt;: Aaron Kromer, Adam Farhi, Adrian CB, Alex Peattie, Alexander Clark, Alexey Fedorov, Andy Lindeman, Arthur Neves, Ashish Dixit, Ben Hoskings, Ben Moss, Bradley Schaefer, David Chelimsky, David Dollar, Federico Ravasio, Giuseppe Capizzi, Jay Hayes, John Feminella, Jon Rowe, Karthik Kastury, Keiji, Kelly Stannard, MasterLambaster, Matijs van Zuijlen, Matthew M. Boedicker, Michael de Silva, Michi Huber, Myron Marston, Nerian, Parker Selbert, Pete Higgins, Peter Alfvin, Postmodern, RenÃ© FÃ¶hring, Ryo Nakamura, Sam Phippen, Sergey Pchelincev, Steve Richert, Tay Ray Chuan, Thomas Stratmann, Tom Stuart, Travis Herrick, Vipul A M, Xavier Shay, Yoshimi, Yuji Nakayama, thepoho&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations"&gt;rspec-expectations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 924&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 191&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;41 contributors&lt;/strong&gt;: Aaron Kromer, Adam Farhi, Adrian Gonzalez, Alexey Pisarenko, Andy Henson, Andy Lindeman, Ben Moss, Ben Orenstein, Bradley Schaefer, Brandon Turner, Claudio B., Damian Galarza, Daniel Fone, Daniel Murphy, David Chelimsky, Eloy Espinaco, Erik Michaels-Ober, Federico Ravasio, Hendy Tanata, Hugo BaraÃºna, Ivo Wever, Jared Norman, Jeff Wallace, John Voloski, Jon Rowe, Katsuhiko Nishimra, Kenrick Chien, Myron Marston, Nerian, Pedro Gimenez, Pete Higgins, Prathamesh Sonpatki, RenÃ© FÃ¶hring, Reyes Yang, Sam Phippen, Thijs Wouters, Thomas Holmes, Xavier Shay, Yuji Nakayama, lucapette, modocache&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks"&gt;rspec-mocks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 1036&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 249&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;36 contributors&lt;/strong&gt;: Aaron Kromer, Adarsh Pandit, Andy Lindeman, Arthur Nogueira Neves, Ashish Dixit, Ben Moss, Bradley Schaefer, Cezar Halmagean, David Chelimsky, Federico Ravasio, Grant Hollingworth, Guilherme Carvalho, Jon Rowe, Jonathan del Strother, Justin Coyne, Marc-Andre Lafortune, Mauricio Linhares, Michael Gee, Michi Huber, Myron Marston, Nick DeLuca, Oren Dobzinski, Paul Annesley, Pete Higgins, RenÃ© FÃ¶hring, Sam Phippen, Stephen Best, Stuart Hicks, Thomas Holmes, Tim Cowlishaw, Tom Ward, Vinicius Horewicz, Xavier Shay, Yuji Nakayama, maxlinc, sanemat&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails"&gt;rspec-rails:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 497&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 94&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;39 contributors&lt;/strong&gt;: Aaron Blew, Aaron Kromer, AbuSabah, Alex Rothenberg, Alex Yaremyuk, Andy Lindeman, Andy Waite, Ben Hamill, Billy, Bradley Schaefer, Brian Fontenot, Christof, Darryl Pogue, David Long, Florian Thomas, Fujimura Daisuke, Giovanni Cappellotto, Jakub Racek, Johannes / universa1, John Firebaugh, John Voloski, Jon Rowe, Lucas Mazza, Matt Sanders, Myron Marston, Olle Jonsson, Paavo Leinonen, Peter Inglesby, Puneet Goyal, RenÃ© FÃ¶hring, Rodrigo Rosenfeld Rosas, Salimane Adjao Moustapha, Sam Phippen, Thomas Drake-Brockman, Thomas Holmes, Tim Watson, Xavier Shay, Yuji Nakayama, vanstee&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;p&gt;These are just the changelogs for what's changed since RC1. The full changelogs are available on github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/blob/master/Changelog.md"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/blob/master/Changelog.md"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/blob/master/Changelog.md"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/blob/master/Changelog.md"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core-2990"&gt;rspec-core 2.99.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v2.99.0.rc1...v2.99.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;BaseTextFormatter&lt;/code&gt; so that it does not re-close a closed output
stream. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;RSpec::Configuration#backtrace_exclusion_patterns&lt;/code&gt; rather than the
deprecated &lt;code&gt;RSpec::Configuration#backtrace_clean_patterns&lt;/code&gt; when mocking
with rr. (David Dollar)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core-300"&gt;rspec-core 3.0.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.0.0.rc1...v3.0.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;BaseTextFormatter&lt;/code&gt; so that it does not re-close a closed output
stream. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix regression in metadata that caused the metadata hash of a top-level
example group to have a &lt;code&gt;:parent_example_group&lt;/code&gt; key even though it has
no parent example group. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alter the default &lt;code&gt;spec_helper.rb&lt;/code&gt; to no longer recommend
&lt;code&gt;config.full_backtrace = true&lt;/code&gt; see #1536 for discussion. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-2990"&gt;rspec-expectations 2.99.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v2.99.0.rc1...v2.99.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Special case deprecation message for &lt;code&gt;errors_on&lt;/code&gt; with &lt;code&gt;rspec-rails&lt;/code&gt; to be more useful.
(Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-300"&gt;rspec-expectations 3.0.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.0.0.rc1...v3.0.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No code changes. Just taking it out of pre-release.&lt;/p&gt;

&lt;h3 id="rspec-mocks-2990"&gt;rspec-mocks 2.99.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v2.99.0.rc1...v2.99.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No changes. Just taking it out of pre-release.&lt;/p&gt;

&lt;h3 id="rspec-mocks-300"&gt;rspec-mocks 3.0.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.0.0.rc1...v3.0.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix module prepend detection to work properly on ruby 2.0 for a case
where a module is extended onto itself. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;transfer_nested_constants&lt;/code&gt; option so that transferred constants
get properly reset at the end of the example. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;config.transfer_nested_constants = true&lt;/code&gt; so that you don't
erroneously get errors when stubbing a constant that is not a module
or a class. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix regression that caused &lt;code&gt;double(:class =&amp;gt; SomeClass)&lt;/code&gt; to later
trigger infinite recursion. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix bug in &lt;code&gt;have_received(...).with(...).ordered&lt;/code&gt; where it was not
taking the args into account when checking the order. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix bug in &lt;code&gt;have_received(...).ordered&lt;/code&gt; where it was wrongly
considering stubs when checking the order. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Message expectation matchers now show descriptions from argument
matchers when their expectations aren't met. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Display warning when encountering &lt;code&gt;TypeError&lt;/code&gt; during instance method
staging on 2.0.0-p195, suffers from https://bugs.ruby-lang.org/issues/8686
too. (Cezar Halmagean).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-2990"&gt;rspec-rails 2.99.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v2.99.0.rc1...v2.99.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No changes. Just taking it out of pre-release.&lt;/p&gt;

&lt;h3 id="rspec-rails-300"&gt;rspec-rails 3.0.0&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.0.0.rc1...v3.0.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separate RSpec configuration in generated &lt;code&gt;spec_helper&lt;/code&gt; from Rails setup
and associated configuration options. Moving Rails specific settings and
options to &lt;code&gt;rails_helper&lt;/code&gt;. (Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix an issue with fixture support when &lt;code&gt;ActiveRecord&lt;/code&gt; isn't loaded. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Notable Changes in RSpec 3</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/"/>
    <id>http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/</id>
    <published>2014-05-20T17:00:00-07:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;Update: there's a &lt;a href="http://nilp.hatenablog.com/entry/2014/05/28/003335"&gt;Japanese
translation&lt;/a&gt; of this
available now.&lt;/p&gt;

&lt;p&gt;RSpec 3.0.0 RC1 was &lt;a href="/blog/2014/05/rspec-2-99-and-3-0-rc-1-have-been-released"&gt;released a couple days
ago&lt;/a&gt;,
and 3.0.0 final is just around the corner.  We've been using the betas for the
last 6 months and we're excited to share them with you. Here's whats new:&lt;/p&gt;

&lt;h2 id="across-all-gems"&gt;Across all gems&lt;/h2&gt;

&lt;h3 id="removed-support-for-ruby-186-and-191"&gt;Removed support for Ruby 1.8.6 and 1.9.1&lt;/h3&gt;

&lt;p&gt;These versions of Ruby were end-of-lifed long ago and
RSpec 3 does not support them.&lt;/p&gt;

&lt;h3 id="improved-ruby-2x-support"&gt;Improved Ruby 2.x support&lt;/h3&gt;

&lt;p&gt;Recent releases of RSpec 2.x (i.e. those that came out after
Ruby 2.0 was released) have officially supported Ruby 2, but RSpec 3's
support is greatly improved. We now provide support for working
with the new features of Ruby 2, like keyword arguments and prepended
modules.&lt;/p&gt;

&lt;h3 id="new-rspec-support-gem"&gt;New rspec-support gem&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/rspec/rspec-support"&gt;rspec-support&lt;/a&gt; is a new gem
that we're using for common code needed by more than one of
rspec-(core|expectations|mocks|rails). It doesn't currently contain
any public APIs intended for use by end users or extension library
authors, but we may make some of its APIs public in the future.&lt;/p&gt;

&lt;p&gt;If you run bleeding-edge RSpec by sourcing it from github in your
Gemfile, you'll need to start doing the same for rspec-support as well.&lt;/p&gt;

&lt;h3 id="robust-well-tested-upgrade-process"&gt;Robust, well-tested upgrade process&lt;/h3&gt;

&lt;p&gt;Every breaking change in RSpec 3 has a corresponding deprecation warning in 2.99.
Throughout the betas we have done many upgrades to ensure this process is as
smooth as possible. We've put together &lt;a href="https://relishapp.com/rspec/docs/upgrade"&gt;step by step upgrade
instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The upgrade process also highlights RSpec's new deprecation system
which is highly configurable (allowing you to output deprecations
into a file or turn all deprecations into errors) and is designed
to minimize duplicated deprecation output.&lt;/p&gt;

&lt;h3 id="improved-docs"&gt;Improved Docs&lt;/h3&gt;

&lt;p&gt;We've put a ton of effort into updating the API docs for all gems.
They're currently hosted on &lt;a href="http://rubydoc.info/"&gt;rubydoc.info&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/frames"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-expectations/frames"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-mocks/frames"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-rails/frames"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;â€¦but we're currently working on updating &lt;a href="http://rspec.info/"&gt;rspec.info&lt;/a&gt;
to self-host them.&lt;/p&gt;

&lt;p&gt;While the docs are still a work-in-progress (and frankly, always will be),
we've made sure to explicitly declare all public APIs as part of
&lt;a href="http://semver.org/"&gt;SemVer&lt;/a&gt; compliance. We're absolutely committed to
maintaining all public APIs through all 3.x releases. Private APIs, on
the other hand, are labeled as such because we specifically want to
reserve the flexibility to change them willy nilly in any 3.x release.&lt;/p&gt;

&lt;p&gt;Please do not use APIs we've declared private. If you find yourself
with a need not addressed by the existing public APIs, please ask.
We'll gladly either make a private API public for your needs
or add a new API to meet your use case.&lt;/p&gt;

&lt;h3 id="gems-are-now-signed"&gt;Gems are now signed&lt;/h3&gt;

&lt;p&gt;We've started signing our gem releases. While the current gem signing
system is far from ideal, and &lt;a href="http://corner.squareup.com/2013/12/securing-rubygems-with-tuf-part-1.html"&gt;a better
solution&lt;/a&gt;
is being developed, it's better than nothing. We've put our public cert on
&lt;a href="https://github.com/rspec/rspec/blob/master/certs/rspec.pem"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on the current gem signing system, see &lt;a href="http://blog.meldium.com/home/2013/3/3/signed-rubygems-part"&gt;A Practical
Guide to Using Signed Ruby
Gems&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="zero-monkey-patching-mode"&gt;Zero monkey patching mode&lt;/h3&gt;

&lt;p&gt;RSpec can now be used without any monkey patching whatsoever.
Much of the groundwork for this was laid in recent 2.x releases
that added the new &lt;code&gt;expect&lt;/code&gt;-based syntax to rspec-expectations
and rspec-mocks. We've gone the rest of the way in RSpec 3 and
provided alternatives for the remaining monkey patches.&lt;/p&gt;

&lt;p&gt;For convenience you can disable all of the monkey patches with one option:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;disable_monkey_patching!&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/waterlink"&gt;Alexey Fedorov&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1465"&gt;implementing&lt;/a&gt; this config option.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#disable_monkey_patching%21-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="rspec-core"&gt;rspec-core&lt;/h2&gt;

&lt;h3 id="new-names-for-hook-scopes-example-and-context"&gt;New names for hook scopes: &lt;code&gt;:example&lt;/code&gt; and &lt;code&gt;:context&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;RSpec 2.x had three different hook scopes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# runs before each example in this group&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# runs once before the first example in this group&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# runs before each example in the entire test suite&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# runs before the first example of each top-level group&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:suite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# runs once after all spec files have been loaded, before the first spec runs&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At times, users have expressed confusion around what &lt;code&gt;:each&lt;/code&gt; vs &lt;code&gt;:all&lt;/code&gt;
means, and &lt;code&gt;:all&lt;/code&gt; in particular can be confusing when you use it in a
config block:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this context, the term &lt;code&gt;:all&lt;/code&gt; suggests that this hook will run once
before all examples in the suite â€” but that is what &lt;code&gt;:suite&lt;/code&gt; is for.&lt;/p&gt;

&lt;p&gt;In RSpec 3, &lt;code&gt;:each&lt;/code&gt; and &lt;code&gt;:all&lt;/code&gt; have aliases that make their scope
more explicit: &lt;code&gt;:example&lt;/code&gt; is an alias of &lt;code&gt;:each&lt;/code&gt; and &lt;code&gt;:context&lt;/code&gt;
is an alias of &lt;code&gt;:all&lt;/code&gt;. Note that &lt;code&gt;:each&lt;/code&gt; and &lt;code&gt;:all&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; deprecated
and we have no plans to do so.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/fj"&gt;John Feminella&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1174"&gt;implementing&lt;/a&gt; this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Hooks#before-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/297"&gt;rspec-core #297 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="dsl-methods-yield-the-example-as-an-argument"&gt;DSL methods yield the example as an argument&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RSpec::Core::Example&lt;/code&gt; provides access to all the details about an
example: its description, location, metadata, execution result, etc.
In RSpec 2.x the example was exposed via an &lt;code&gt;example&lt;/code&gt; method that could
be accessed from any hook or individual example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 3, we've removed the &lt;code&gt;example&lt;/code&gt; method. Instead, the example
instance is yielded to all example-scoped DSL methods as an explicit
argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:example_description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'accesses the example'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# use ex&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/dchelimsky"&gt;David Chelimsky&lt;/a&gt; for coming up
with the idea and
&lt;a href="https://github.com/rspec/rspec-core/pull/666"&gt;implementing&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Example"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-exposedslglobally-config-option-to-disable-rspec-core-monkey-patching"&gt;New &lt;code&gt;expose_dsl_globally&lt;/code&gt; config option to disable rspec-core monkey patching&lt;/h3&gt;

&lt;p&gt;RSpec 2.x monkey patched &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;Module&lt;/code&gt; to provide top level
methods like &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;shared_examples_for&lt;/code&gt; and &lt;code&gt;shared_context&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;shared_examples_for&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyGem&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;SomeClass&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 3, these methods are now also available on the &lt;code&gt;RSpec&lt;/code&gt; module
(in addition to still being available as monkey patches):&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_examples_for&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyGem&lt;/span&gt;
  &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;SomeClass&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s2"&gt;"something"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can completely remove rspec-core's monkey patching (which
would make the first example above raise &lt;code&gt;NoMethodError&lt;/code&gt;) by
setting the new &lt;code&gt;expose_dsl_globally&lt;/code&gt; config option to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expose_dsl_globally&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/JonRowe"&gt;Jon Rowe&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1036"&gt;implementing&lt;/a&gt; this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-core/v/3-0/docs/configuration/global-namespace-dsl"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="define-example-group-aliases-with-aliasexamplegroupto"&gt;Define example group aliases with &lt;code&gt;alias_example_group_to&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In RSpec 2.x, we provided an API that allowed you to define &lt;code&gt;example&lt;/code&gt;
aliases with attached metadata. For example, this is used internally to
define &lt;code&gt;fit&lt;/code&gt; as an alias for &lt;code&gt;it&lt;/code&gt; with &lt;code&gt;:focus =&amp;gt; true&lt;/code&gt; metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;alias_example_to&lt;/span&gt; &lt;span class="ss"&gt;:fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 3, we've extended this feature to example groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;alias_example_group_to&lt;/span&gt; &lt;span class="ss"&gt;:describe_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:model&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could use this example in a project using rspec-rails and use
&lt;code&gt;describe_model User&lt;/code&gt; rather than &lt;code&gt;describe User, :type =&amp;gt; :model&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/michihuber"&gt;Michi Huber&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1236"&gt;implementing&lt;/a&gt; this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#alias_example_group_to-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/issues/493"&gt;rspec-core #493 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-example-group-aliases-xdescribe-xcontext-fdescribe-fcontext"&gt;New example group aliases: &lt;code&gt;xdescribe&lt;/code&gt;, &lt;code&gt;xcontext&lt;/code&gt;, &lt;code&gt;fdescribe&lt;/code&gt;, &lt;code&gt;fcontext&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Besides including an API to define example group aliases, we've also
included several additional built-in aliases (on top of &lt;code&gt;describe&lt;/code&gt; and
&lt;code&gt;context&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;xdescribe&lt;/code&gt;/&lt;code&gt;xcontext&lt;/code&gt;, like &lt;code&gt;xit&lt;/code&gt; for examples, can be used to temporarily skip an
example group.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fdescribe&lt;/code&gt;/&lt;code&gt;fcontext&lt;/code&gt;, like &lt;code&gt;fit&lt;/code&gt; for examples, can be used to temporarily add
&lt;code&gt;:focus =&amp;gt; true&lt;/code&gt; metadata to an example group so that you can easily
filter to the focused examples and groups via &lt;code&gt;config.filter_run :focus&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/ExampleGroup"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/1255"&gt;rspec-core #1255 - implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="changes-to-pending-semantics-and-introduction-of-skip"&gt;Changes to &lt;code&gt;pending&lt;/code&gt; semantics (and introduction of &lt;code&gt;skip&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;Pending examples are now run to check if they are actually passing. If
a pending block fails, then it will be marked pending as before. However, if
it succeeds it will cause a failure. This helps ensure that pending examples are
valid, and also that they are promptly dealt with when the behaviour they
describe is implemented.&lt;/p&gt;

&lt;p&gt;To support the old "never run" behaviour, the &lt;code&gt;skip&lt;/code&gt; method and metadata has
been added. None of the following examples will ever be run:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="s1"&gt;'not implemented yet'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'does something'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:skip&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'does something'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:skip&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'reason explanation'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'does something else'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;skip&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'does something else'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="s1"&gt;'reason explanation'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this change, passing a block to &lt;code&gt;pending&lt;/code&gt; within an example no longer
makes sense, so that behaviour has been removed.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://xaviershay.com"&gt;Xavier Shay&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1267"&gt;implementing&lt;/a&gt; this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-core/v/3-0/docs/pending-and-skipped-examples"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/issues/1208"&gt;rspec-core #1208 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-api-for-one-liners-isexpected"&gt;New API for one-liners: &lt;code&gt;is_expected&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;RSpec has had a one-liner syntax for many years:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;allow_mass_assignment_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this context, &lt;code&gt;should&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; the monkey-patched &lt;code&gt;should&lt;/code&gt;
that can be removed by configuring rspec-expectations to only
support the &lt;code&gt;:expect&lt;/code&gt; syntax. It doesn't have the baggage that
monkey-patching &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;should&lt;/code&gt; brings, and is always
available regardless of your syntax configuration.&lt;/p&gt;

&lt;p&gt;Some users have expressed confusion about how this &lt;code&gt;should&lt;/code&gt; relates
to the &lt;code&gt;expect&lt;/code&gt; syntax and if you can continue using it. It will continue
to be available in RSpec 3 (again, regardless of your syntax configuration),
but we've also added an alternate API that is a bit more consistent with
the &lt;code&gt;expect&lt;/code&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;is_expected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;allow_mass_assignment_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;is_expected&lt;/code&gt; is defined very simply as &lt;code&gt;expect(subject)&lt;/code&gt; and also
supports negative expectations via &lt;code&gt;is_expected.not_to matcher&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/MemoizedHelpers#is_expected-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/1180"&gt;rspec-core #1180 - implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="example-groups-can-be-ordered-individually"&gt;Example groups can be ordered individually&lt;/h3&gt;

&lt;p&gt;RSpec 2.8 introduced random ordering to RSpec, which is very useful for
surfacing unintentional ordering dependencies in your spec suite. In
RSpec 3, it's no longer an all-or-nothing feature. You can control how
individual example groups are ordered by tagging them with appropriate
metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:defined&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# examples in this group will always run in defined order,&lt;/span&gt;
  &lt;span class="c1"&gt;# regardless of any other ordering configuration.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:random&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# examples in this group will always run in random order,&lt;/span&gt;
  &lt;span class="c1"&gt;# regardless of any other ordering configuration.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful for migrating from defined to random
ordering, as it allows you to deal with ordering dependencies one-by-one
as you opt-in to the feature for particular groups rather than
having to solve the issues all at once.&lt;/p&gt;

&lt;p&gt;As part of this we've also renamed &lt;code&gt;--order default&lt;/code&gt; to &lt;code&gt;--order
defined&lt;/code&gt;, because we realized that "default" was a highly overloaded
term.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/alindeman"&gt;Andy Lindeman&lt;/a&gt; and &lt;a href="https://github.com/samphippen"&gt;Sam
Phippen&lt;/a&gt; for helping
&lt;a href="https://github.com/rspec/rspec-core/pull/1025"&gt;implement&lt;/a&gt; this feature.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#register_ordering-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-ordering-strategy-api"&gt;New ordering strategy API&lt;/h3&gt;

&lt;p&gt;In RSpec 3, we've overhauled the ordering strategy API. What used to be
&lt;a href="http://rubydoc.info/gems/rspec-core/2.14.8/RSpec/Core/Configuration:order_examples"&gt;three&lt;/a&gt;
&lt;a href="http://rubydoc.info/gems/rspec-core/2.14.8/RSpec/Core/Configuration:order_groups"&gt;different&lt;/a&gt;
&lt;a href="http://rubydoc.info/gems/rspec-core/2.14.8/RSpec/Core/Configuration:order_groups_and_examples"&gt;methods&lt;/a&gt;
is now one method: &lt;code&gt;register_ordering&lt;/code&gt;. Use it to define a named ordering
strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_ordering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:description_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort_by&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:description_length&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, you can use it to define the global ordering:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_ordering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:global&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# sort them alphabetically&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort_by&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;:global&lt;/code&gt; ordering is used to order the top-level example groups
and to order all example groups that do not have &lt;code&gt;:order&lt;/code&gt; metadata.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#register_ordering-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/1025"&gt;rspec-core #1025 - implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec---init-improvements"&gt;&lt;code&gt;rspec --init&lt;/code&gt; improvements&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;rspec&lt;/code&gt; command has provided the &lt;code&gt;--init&lt;/code&gt; option to setup a project
skeleton for a long time. In RSpec 3, the files it produces have been
greatly improved to provide a better out-of-the-box experience and
to provide a &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; file with more recommended settings.&lt;/p&gt;

&lt;p&gt;Note that recommended settings which are not slated to become future
defaults are commented out in the generated file, so it's a good idea
to open the file and accept the recommendations you want.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/1219"&gt;rspec-core #1219 - implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new---dry-run-cli-option"&gt;New &lt;code&gt;--dry-run&lt;/code&gt; CLI option&lt;/h3&gt;

&lt;p&gt;This option will print the formatter output of your spec suite
without running any of the examples or hooks. It's particularly
useful as way to review your suite's documentation output without
waiting for your specs to run or worrying about their pass/fail
status.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/schnittchen"&gt;Thomas Stratmann&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-core/pull/1028"&gt;contributing&lt;/a&gt; this!&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-core/v/3-0/docs/command-line/dry-run-option"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/issues/1022"&gt;rspec-core #1022 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="formatter-api-changes"&gt;Formatter API changes&lt;/h3&gt;

&lt;p&gt;A completely new formatter API has been added that is much more flexible.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subscribe only to the events you care about.&lt;/li&gt;
  &lt;li&gt;Methods receive notification objects rather than specific parameters,
so new notification data can be added in a backwards compatible manner.&lt;/li&gt;
  &lt;li&gt;Helper methods are exposed on notification objects such that inheriting
from &lt;code&gt;BaseTextFormatter&lt;/code&gt; is no longer effectively necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new formatters looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomFormatter&lt;/span&gt;
  &lt;span class="nc"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Formatters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:example_started&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example_started&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@output&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"example: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href="https://github.com/rspec/rspec-legacy_formatters"&gt;rspec-legacy_formatters
gem&lt;/a&gt; is provided to continue
to support the old 2.x formatter API.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/JonRowe"&gt;Jon Rowe&lt;/a&gt; for taking charge of
this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/tpope/fivemat/blob/3f4f550fa2852a34a020d31d834a7a3f0210b1ca/lib/fivemat/rspec3.rb"&gt;Fivemat's RSpec 3 formatter (example of a full formatter implemenation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="assertion-config-changes"&gt;Assertion config changes&lt;/h3&gt;

&lt;p&gt;While most users use rspec-expectations, it's trivial to use something
else and RSpec 2.x made the most common alternate easily available via
a config option:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:stdlib&lt;/span&gt;
  &lt;span class="c1"&gt;# or, to use both:&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:stdlib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there's been confusion around &lt;code&gt;:stdlib&lt;/code&gt;. On Ruby 1.8, the
standard lib assertion module is &lt;code&gt;Test::Unit::Assertions&lt;/code&gt;. On 1.9+ it's
a thin wrapper over &lt;code&gt;Minitest::Assertions&lt;/code&gt; (and you're generally better
off using just that).  Meanwhile, there's also a test-unit gem
that defines &lt;code&gt;Test::Unit::Assertions&lt;/code&gt; (which is &lt;em&gt;not&lt;/em&gt; a wrapper over
minitest) and a minitest gem.&lt;/p&gt;

&lt;p&gt;For RSpec 3, we've removed &lt;code&gt;expect_with :stdlib&lt;/code&gt; and instead opted
for explicit &lt;code&gt;:test_unit&lt;/code&gt; and &lt;code&gt;:minitest&lt;/code&gt; options:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# for test-unit:&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:test_unit&lt;/span&gt;

  &lt;span class="c1"&gt;# for minitest:&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:minitest&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="http://aaronkromer.com/"&gt;Aaron Kromer&lt;/a&gt; for &lt;a href="https://github.com/rspec/rspec-core/pull/1466"&gt;implementing
this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#expect_with-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="define-derived-metadata"&gt;Define derived metadata&lt;/h3&gt;

&lt;p&gt;RSpec's metadata system is extremely flexible, allowing you to slice and
dice your test suite in many ways. There's a new config API that allows
you to define derived metadata. For example, to automatically tag all
example groups in &lt;code&gt;spec/acceptance/js&lt;/code&gt; with &lt;code&gt;:js =&amp;gt; true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_derived_metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:file_path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;%r{/spec/acceptance/js/}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:js&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Configuration#define_derived_metadata-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/pull/1496"&gt;rspec-core #1496 - implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/issues/969"&gt;rspec-core #969 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="removals"&gt;Removals&lt;/h3&gt;

&lt;p&gt;Several things that are no longer core to RSpec have either been removed
entirely or extracted into an external gem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Textmate formatter has been moved into the &lt;a href="https://github.com/rspec/rspec-tmbundle"&gt;Textmate
bundle&lt;/a&gt;.
Having a formatter for one specific text editor in rspec-core doesn't
really make sense.&lt;/li&gt;
  &lt;li&gt;RCov integration has been dropped. It was never updated to work with
1.9+ and these days we recommend using
&lt;a href="https://github.com/colszowka/simplecov"&gt;simplecov&lt;/a&gt; instead.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;--debug&lt;/code&gt; CLI option has been removed. These days there are many
different debugger options, and you can activate them from the command
line using the &lt;code&gt;--require&lt;/code&gt; (or &lt;code&gt;-r&lt;/code&gt;) option. For example, to use
&lt;a href="https://github.com/deivid-rodriguez/byebug"&gt;byebug&lt;/a&gt;, pass &lt;code&gt;-rbyebug&lt;/code&gt;
at the command line.&lt;/li&gt;
  &lt;li&gt;We've removed the &lt;code&gt;--line-number&lt;/code&gt; CLI option. It had dubious semantics
to begin with (&lt;code&gt;--line-number 43&lt;/code&gt; would filter to the example defined
near line 43 in every loaded spec file, but there's no reason line 43 in
each file would be related), and duplicates the more terse
&lt;code&gt;path/to/spec.rb:43&lt;/code&gt; form.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;its&lt;/code&gt; has been extracted into the new
&lt;a href="https://github.com/rspec/rspec-its"&gt;rspec-its&lt;/a&gt; gem, which
&lt;a href="https://github.com/palfvin"&gt;Peter Alfvin&lt;/a&gt; has kindly offered to maintain.&lt;/li&gt;
  &lt;li&gt;Autotest integration has been extracted into the new new
&lt;a href="https://github.com/rspec/rspec-autotest"&gt;rspec-autotest&lt;/a&gt; gem (which
could use a maintainer: any volunteers?).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="rspec-expectations"&gt;rspec-expectations&lt;/h2&gt;

&lt;h3 id="using-should-syntax-without-explicitly-enabling-it-is-deprecated"&gt;Using &lt;code&gt;should&lt;/code&gt; syntax without explicitly enabling it is deprecated&lt;/h3&gt;

&lt;p&gt;In RSpec 2.11 we started the move towards eliminating monkey patching
from RSpec by &lt;a href="/blog/2012/06/rspecs-new-expectation-syntax"&gt;introducing a new expect-based
syntax&lt;/a&gt;.
In RSpec 3, we've kept the &lt;code&gt;should&lt;/code&gt; syntax, and it is available by
default, but you will get a deprecation warning if you use it without
explicitly enabling it. This will pave the way for it being disabled
by default (or potentially extracted into a seperate gem) in RSpec 4,
while minimizing confusion for newcomers coming to RSpec via an old tutorial.&lt;/p&gt;

&lt;p&gt;We consider the &lt;code&gt;expect&lt;/code&gt; syntax to be the "main" syntax of RSpec now,
but if you prefer the older &lt;code&gt;should&lt;/code&gt;-based syntax, feel free to keep using it:
we have no plans to ever kill it.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/326"&gt;implementing&lt;/a&gt;
this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-expectations/v/3-0/docs/syntax-configuration"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="compound-matcher-expressions"&gt;Compound Matcher Expressions&lt;/h3&gt;

&lt;p&gt;In RSpec 3, you can chain multiple matchers together using &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# these two expectations...&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;start_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;end_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ...can be combined into one expression:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;start_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;end_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# You can also use `or`:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stoplight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;color&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are aliased to the &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;start_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;end_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stoplight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;color&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/eloyesp"&gt;Eloy Espinaco&lt;/a&gt; for &lt;a href="https://github.com/rspec/rspec-expectations/pull/329"&gt;suggesting and
implementing&lt;/a&gt;
this feature, and to &lt;a href="https://github.com/yelled3"&gt;Adam Farhi&lt;/a&gt; for &lt;a href="https://github.com/rspec/rspec-expectations/pull/537"&gt;extending
it&lt;/a&gt; with the &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; operators.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/blog/2014/01/new-in-rspec-3-composable-matchers#compound_matcher_expressions"&gt;New in RSpec 3: Composable Matchers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-expectations/v/3-0/docs/compound-expectations"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="composable-matchers"&gt;Composable Matchers&lt;/h3&gt;

&lt;p&gt;RSpec 3 allows you to expressed detailed intent by passing matchers
as arguments to other matchers:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"food"&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"barn"&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;
  &lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a_string_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a_string_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;probe&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="s2"&gt;"food"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;probe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;yield_with_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a_string_starting_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For improved readability in both the code expression and failure
messages, most matchers have aliases that read properly when
passed as arguments in these sorts of expressions.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/blog/2014/01/new-in-rspec-3-composable-matchers"&gt;New in RSpec 3: Composable Matchers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/issues/280"&gt;rspec-expectations #280 - original discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/pull/393"&gt;rspec-expectations #393 - implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-expectations/RSpec/Matchers"&gt;API Documentation (including list of matcher aliases)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-expectations/v/3-0/docs/composing-matchers"&gt;Relish Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="match-matcher-can-be-used-for-data-structures"&gt;&lt;code&gt;match&lt;/code&gt; matcher can be used for data structures&lt;/h3&gt;

&lt;p&gt;Before RSpec 3, the &lt;code&gt;match&lt;/code&gt; matcher existed to perform string/regex
matching using the &lt;code&gt;#match&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"food"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"food"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 3, it additionally supports matching arbitrarily nested
array/hash data structures. The expected value can be expressed
using matchers at any level of nesting:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_collection_containing_exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;an_instance_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Fixnum&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;a_string_starting_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/blog/2014/01/new-in-rspec-3-composable-matchers#match"&gt;New in RSpec 3: Composable Matchers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-all-matcher"&gt;New &lt;code&gt;all&lt;/code&gt; matcher&lt;/h3&gt;

&lt;p&gt;This matcher lets you specify that something is true of all items in a
collection. Pass a matcher as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;be_odd&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/yelled3"&gt;Adam Farhi&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/491"&gt;contributing&lt;/a&gt; this!&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-expectations/RSpec/Matchers#all-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-output-matcher"&gt;New &lt;code&gt;output&lt;/code&gt; matcher&lt;/h3&gt;

&lt;p&gt;This matcher can be used to specify that a block writes to either stdout
or stderr:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_stdout&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/fo/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_stdout&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;warn&lt;/span&gt;  &lt;span class="s2"&gt;"bar"&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_stderr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/matthias-guenther"&gt;Matthias GÃ¼nther&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/399"&gt;suggesting&lt;/a&gt; this
(and for getting the ball rolling) and &lt;a href="https://github.com/lucapette"&gt;Luca
Pette&lt;/a&gt; for &lt;a href="https://github.com/rspec/rspec-expectations/pull/410"&gt;taking the feature
across the finish line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-expectations/RSpec/Matchers#output-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="new-bebetween-matcher"&gt;New &lt;code&gt;be_between&lt;/code&gt; matcher&lt;/h3&gt;

&lt;p&gt;RSpec 2 provided a &lt;code&gt;be_between&lt;/code&gt; matcher for objects that implement
&lt;code&gt;between?&lt;/code&gt; using the dynamic predicate support. In RSpec 3, we are
gaining a first class &lt;code&gt;be_between&lt;/code&gt; matcher that is better in a few ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The failure message is much better â€” rather than telling you that
&lt;code&gt;between?(1, 10)&lt;/code&gt; returned false, it will tell you &lt;code&gt;expected 11 to be
between 1 and 10&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It works on objects that implement the comparison operators (e.g. &lt;code&gt;&amp;lt;&lt;/code&gt;,
&lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;) but do not implement &lt;code&gt;between?&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It provides both &lt;code&gt;inclusive&lt;/code&gt; and &lt;code&gt;exclusive&lt;/code&gt; modes.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# like `Comparable#between?`, it is inclusive by default&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ...but you can make it exclusive:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;exclusive&lt;/span&gt;

&lt;span class="c1"&gt;# ...or explicitly label it inclusive:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;inclusive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/sferik"&gt;Erik Michaels-Ober&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/405"&gt;contributing&lt;/a&gt; this and
&lt;a href="https://github.com/pedrogimenez"&gt;Pedro Gimenez&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/412"&gt;improving&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-expectations/RSpec/Matchers#be_between-instance_method"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="boolean-matchers-have-been-renamed"&gt;Boolean matchers have been renamed&lt;/h3&gt;

&lt;p&gt;RSpec 2 had a pair of matchers (&lt;code&gt;be_true&lt;/code&gt; and &lt;code&gt;be_false&lt;/code&gt;) that mirror
Ruby's conditional semantics: &lt;code&gt;be_true&lt;/code&gt; would pass for any value besides
&lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;be_false&lt;/code&gt; would pass for &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In RSpec 3, we've renamed these to &lt;code&gt;be_truthy&lt;/code&gt; and &lt;code&gt;be_falsey&lt;/code&gt;
(or &lt;code&gt;be_falsy&lt;/code&gt;, if you prefer that spelling) to make their semantics
more explicit and to reduce confusion with &lt;code&gt;be true&lt;/code&gt;/&lt;code&gt;be false&lt;/code&gt;
(which read the same as &lt;code&gt;be_true&lt;/code&gt;/&lt;code&gt;be_false&lt;/code&gt; but only pass when given
exact &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; values).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-expectations/pull/284"&gt;implementing&lt;/a&gt;
this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/issues/283"&gt;rspec-expectations #283 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="matcharray-matcher-now-available-as-containexactly"&gt;&lt;code&gt;match_array&lt;/code&gt; matcher now available as &lt;code&gt;contain_exactly&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;RSpec has long had a matcher that allows you to match the contents of
two arrays while disregarding any ordering differences. Originally,
this was available using the &lt;code&gt;=~&lt;/code&gt; operator with the old &lt;code&gt;should&lt;/code&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later, when we &lt;a href="/blog/2012/06/rspecs-new-expectation-syntax"&gt;added the &lt;code&gt;expect&lt;/code&gt;
syntax&lt;/a&gt;,
we decided not to bring the operator matchers forward to the new syntax,
and called the matcher &lt;code&gt;match_array&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match_array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;match_array&lt;/code&gt; was the best name we could think of at the time
but we weren't super happy with it: "match" is an imprecise
term and the matcher is meant to work on other kinds of collections
besides arrays. We came up with a much better name for it
in RSpec 3:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;contain_exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;match_array&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; deprecated. The two methods behave identically,
except that &lt;code&gt;contain_exactly&lt;/code&gt; accepts the items splatted out individually,
whereas &lt;code&gt;match_array&lt;/code&gt; accepts a single array argument.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-expectations/v/3-0/docs/built-in-matchers/contain-exactly-matcher"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/issues/398"&gt;rspec-expectations #398 - original discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/commit/6bde36e7b4ec67fcdd239cf498bebf07f661e561"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="collection-cardinality-matchers-extracted-into-rspec-collectionmatchers-gem"&gt;Collection cardinality matchers extracted into &lt;code&gt;rspec-collection_matchers&lt;/code&gt; gem&lt;/h3&gt;

&lt;p&gt;The collection cardinality matchers â€” &lt;code&gt;have(x).items&lt;/code&gt;,
&lt;code&gt;have_at_least(y).items&lt;/code&gt; and &lt;code&gt;have_at_most(z).items&lt;/code&gt; â€” were one of
the more "magical" and confusing parts of RSpec. They have
been &lt;a href="https://github.com/rspec/rspec-expectations/pull/293"&gt;extracted&lt;/a&gt; into the
&lt;a href="https://github.com/rspec/rspec-collection_matchers"&gt;rspec-collection-matchers&lt;/a&gt; gem, which
&lt;a href="https://github.com/hugobarauna"&gt;Hugo BaraÃºna&lt;/a&gt; has graciously volunteered to maintain.&lt;/p&gt;

&lt;p&gt;The general alternative is to set an expectation on the size of
a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;
&lt;span class="c1"&gt;# ...can be written as:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_at_least&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;
&lt;span class="c1"&gt;# ...can be written as:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_at_most&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;
&lt;span class="c1"&gt;# ...can be written as:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="improved-integration-with-minitest"&gt;Improved integration with Minitest&lt;/h3&gt;

&lt;p&gt;In RSpec 2.x, rspec-expectations would &lt;a href="https://github.com/rspec/rspec-expectations/blob/v2.14.5/lib/rspec/matchers/test_unit_integration.rb"&gt;automatically include
itself&lt;/a&gt;
in &lt;code&gt;MiniTest::Unit::TestCase&lt;/code&gt; or &lt;code&gt;Test::Unit::TestCase&lt;/code&gt; so that
you could use rspec-expectations from Minitest or Test::Unit simply
by loading it.&lt;/p&gt;

&lt;p&gt;In RSpec 3, we've updated this integration in a couple ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integration with Minitest 4 (or lower) or Test::Unit is no
longer automatic. If you use rspec-expectations in such an
environment, you'll need to &lt;code&gt;include RSpec::Matchers&lt;/code&gt; yourself.&lt;/li&gt;
  &lt;li&gt;Improved integration with Minitest 5 is now provided, but you
have to explicitly load it via &lt;code&gt;require 'rspec/expectations/minitest_integration'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/blob/v3.0.0.beta2/lib/rspec/expectations/minitest_integration.rb"&gt;rspec/expectations/minitest_integration.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="changes-to-the-matcher-protocol"&gt;Changes to the matcher protocol&lt;/h3&gt;

&lt;p&gt;As mentioned above, in RSpec 3, we no longer consider &lt;code&gt;should&lt;/code&gt; to be
the main syntax of rspec-expectations. We've updated the matcher
protocol to reflect this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;failure_message_for_should&lt;/code&gt; is now &lt;code&gt;failure_message&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;failure_message_for_should_not&lt;/code&gt; is now &lt;code&gt;failure_message_when_negated&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;match_for_should&lt;/code&gt; (an alias of &lt;code&gt;match&lt;/code&gt; in the custom matcher DSL)
has been removed with no replacement. (Just use &lt;code&gt;match&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;match_for_should_not&lt;/code&gt; in the custom matcher DSL is now
&lt;code&gt;match_when_negated&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we've added &lt;code&gt;supports_block_expectations?&lt;/code&gt; as a new, optional part
of the matcher protocol. This is used to give users clear errors when they
wrongly use a value matcher in a block expectation expression. For
example, before this change, passing a block to &lt;code&gt;expect&lt;/code&gt; when using a
matcher like &lt;code&gt;be_nil&lt;/code&gt; could lead to false positives:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;

&lt;span class="c1"&gt;# ...is equivalent to:&lt;/span&gt;
&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;

&lt;span class="c1"&gt;# ...but the block is not nil (even though `foo.bar` might return nil),&lt;/span&gt;
&lt;span class="c1"&gt;# so the expectation will pass even though the user probably meant:&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;supports_block_expectations?&lt;/code&gt; is an optional part of the
protocol. For matchers that are not intended to be used in block
expectation expressions, you do not need to define it.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/issues/270"&gt;rspec-expectations #270 - original discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/pull/373"&gt;rspec-expectations #373 - implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/issues/526"&gt;rspec-expectations #530 - original discussion of &lt;code&gt;supports_block_expectations?&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/pull/530"&gt;rspec-expectations #530 - implementation of &lt;code&gt;supports_block_expectations?&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="rspec-mocks"&gt;rspec-mocks&lt;/h2&gt;

&lt;h3 id="using-the-monkey-patched-syntax-without-explicitly-enabling-it-is-deprecated"&gt;Using the monkey-patched syntax without explicitly enabling it is deprecated&lt;/h3&gt;

&lt;p&gt;As with rspec-expectations, we've been moving rspec-mocks towards a
zero-monkey patching syntax. This was &lt;a href="http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/"&gt;originally
introduced&lt;/a&gt;
in 2.14. In RSpec 3, you'll get a deprecation warning if you use the
original syntax (e.g. &lt;code&gt;obj.stub&lt;/code&gt;, &lt;code&gt;obj.should_receive&lt;/code&gt;, etc) without
explicitly enabling it (just like with rspec-expectations' new syntax).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-mocks/pull/339"&gt;implementing&lt;/a&gt;
this.&lt;/p&gt;

&lt;h3 id="receivemessages-and-receivemessagechain-for-the-new-syntax"&gt;&lt;code&gt;receive_messages&lt;/code&gt; and &lt;code&gt;receive_message_chain&lt;/code&gt; for the new syntax&lt;/h3&gt;

&lt;p&gt;The original monkey patching syntax had some features that the
new syntax, as released in 2.14, lacked. We've addressed that
in RSpec 3 via a couple new APIs: &lt;code&gt;receive_messages&lt;/code&gt; and
&lt;code&gt;receive_message_chain&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# old syntax:&lt;/span&gt;
&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# new syntax:&lt;/span&gt;
&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# old syntax:&lt;/span&gt;
&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stub_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bazz&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# new syntax:&lt;/span&gt;
&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive_message_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bazz&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One nice benefit of these new APIs is that they work with &lt;code&gt;expect&lt;/code&gt;, too,
whereas there was no message expectation equivalent of &lt;code&gt;stub(hash)&lt;/code&gt; or
&lt;code&gt;stub_chain&lt;/code&gt; in the old syntax.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/JonRowe"&gt;Jon Rowe&lt;/a&gt; and
&lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for implementing this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-mocks/RSpec/Mocks/ExampleMethods#receive_messages-instance_method"&gt;Documentation for &lt;code&gt;receive_messages&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubydoc.info/github/rspec/rspec-mocks/RSpec/Mocks/ExampleMethods#receive_message_chain-instance_method"&gt;Documentation for
&lt;code&gt;receive_message_chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/issues/368"&gt;rspec-mocks #368 - discussion of &lt;code&gt;receive_messages&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/pull/399"&gt;rspec-mocks #399 - implementation of &lt;code&gt;receive_messages&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/issues/464"&gt;rspec-mocks #464 - discussion of &lt;code&gt;receive_message_chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/pull/467"&gt;rspec-mocks #467 - implementation of &lt;code&gt;receive_message_chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="removed-mock-and-stub-aliases-of-double"&gt;Removed &lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;stub&lt;/code&gt; aliases of &lt;code&gt;double&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Historically, rspec-mocks has provided 3 methods for creating
a test double: &lt;code&gt;mock&lt;/code&gt;, &lt;code&gt;stub&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt;. In RSpec 3, we've
removed &lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;stub&lt;/code&gt; in favor of just &lt;code&gt;double&lt;/code&gt;, and built
out more features that use the &lt;code&gt;double&lt;/code&gt; nomenclature (such as
verifying doubles â€” see below).&lt;/p&gt;

&lt;p&gt;Of course, while RSpec 3 no longer provides &lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;stub&lt;/code&gt;
aliases of &lt;code&gt;double&lt;/code&gt;, it's easy to define these aliases on your
own if you'd like to keep using them:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;DoubleAliases&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;stub&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt; &lt;span class="no"&gt;DoubleAliases&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-mocks/pull/341"&gt;implementation&lt;/a&gt;
this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://gist.github.com/myronmarston/6576665"&gt;Explanation for why we made this change&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="verifying-doubles"&gt;Verifying doubles&lt;/h3&gt;

&lt;p&gt;A new type of double has been added that ensures you only stub or mock methods
that actually exist, and that passed arguments conform to the declared method
signature. The &lt;code&gt;instance_double&lt;/code&gt;, &lt;code&gt;class_double&lt;/code&gt;, and &lt;code&gt;object_double&lt;/code&gt; doubles
will all raise an exception if those conditions aren't met. If the class has
not been loaded (usually when running a unit test in isolation), then no
exceptions will be raised.&lt;/p&gt;

&lt;p&gt;This is a subtle behaviour, but very powerful since it allows the speed of
isolated unit tests with the confidence closer to that of an integration test
(or a type system). There is rarely a reason not to use these new more powerful
double types.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://xaviershay.com"&gt;Xavier Shay&lt;/a&gt; for the idea and implementation
of this feature.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://rhnh.net/2013/12/10/new-in-rspec-3-verifying-doubles"&gt;Blog post on motivation and uses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-mocks/v/3-0/docs/verifying-doubles"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="partial-double-verification-configuration-option"&gt;Partial double verification configuration option&lt;/h3&gt;

&lt;p&gt;Verifying double behaviour can also be &lt;a href="https://relishapp.com/rspec/rspec-mocks/v/3-0/docs/verifying-doubles/partial-doubles"&gt;enabled globally on partial
doubles&lt;/a&gt;.
(A partial double is when you mock or stub an existing object:
&lt;code&gt;expect(MyClass).to receive(:some_message)&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mock_with&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;verify_partial_doubles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We recommend you enable this option for all new code.&lt;/p&gt;

&lt;h3 id="scoping-changes"&gt;Scoping changes&lt;/h3&gt;

&lt;p&gt;rspec-mocks's operations are designed with a per-test lifecycle in mind.
This was documented in RSpec 2, but was not always explicitly enforced
at runtime, and we sometimes got bug reports from users when they tried
to use features of rspec-mocks outside of the per-test lifecycle.&lt;/p&gt;

&lt;p&gt;In RSpec 3, we've tightened this up and this lifecycle is enforced
explicitly at runtime:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usage of rspec-mocks features from a &lt;code&gt;before(:context)&lt;/code&gt; hook (or in any
other context when there is not a current example) is not supported.&lt;/li&gt;
  &lt;li&gt;Test doubles are only usable for one example. If you attempt to use
a test double outside of the example in which it originated (e.g. by
accidentally assigning it to a class attribute and then using it in
a later example), you will get explicit errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've also provided a new API that lets you create temporary scopes in
arbitrary places (such as a &lt;code&gt;before(:context)&lt;/code&gt; hook):&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyWebCrawler&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Mocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_temporary_scope&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyWebCrawler&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:crawl_depth_limit&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@crawl_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyWebCrawler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_crawl_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://some-host.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c1"&gt;# verification and resets happen when the block completes&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for helping with
&lt;a href="https://github.com/rspec/rspec-mocks/pull/449"&gt;implementing&lt;/a&gt; these changes,
and &lt;a href="https://github.com/skalee"&gt;Sebastian SkaÅ‚acki&lt;/a&gt; for suggesting the new
&lt;code&gt;with_temporary_scope&lt;/code&gt; feature.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/issues/240"&gt;rspec-mocks #240 - original discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/pull/519"&gt;rspec-mocks #519 - &lt;code&gt;with_temporary_scope&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="anyinstance-implementation-blocks-yield-the-receiver"&gt;&lt;code&gt;any_instance&lt;/code&gt; implementation blocks yield the receiver&lt;/h3&gt;

&lt;p&gt;When providing an implementation block for a method stub it can be
useful to do some calculation based on the state of the object.
Unfortunately, there wasn't a simple way to do this when using
&lt;code&gt;any_instance&lt;/code&gt; in RSpec 2. In RSpec 3, the receiver is yielded
as the first argument to an &lt;code&gt;any_instance&lt;/code&gt; implementation block,
making this easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;allow_any_instance_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:salary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;usd_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50_000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10_000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;years_worked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_usd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usd_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:CAD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/samphippen"&gt;Sam Phippen&lt;/a&gt; for
&lt;a href="https://github.com/rspec/rspec-mocks/pull/351"&gt;implementing&lt;/a&gt; this.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/issues/175"&gt;rspec-mocks #175 - original discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="rspec-rails"&gt;rspec-rails&lt;/h2&gt;

&lt;h3 id="file-type-inference-disabled-by-default"&gt;File-type inference disabled by default&lt;/h3&gt;

&lt;p&gt;rspec-rails automatically adds metadata to specs based on their location on the
filesystem. This is confusing to new users, and not desirable for some veteran
users.&lt;/p&gt;

&lt;p&gt;In RSpec 3, this behavior must be explicitly enabled:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;infer_spec_type_from_file_location!&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this assumed behavior is so prevalent in tutorials, the default generated
configuration still enables this.&lt;/p&gt;

&lt;p&gt;To explicitly tag specs without using automatic inference, set the &lt;code&gt;type&lt;/code&gt;
metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;ThingsController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :controller&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# Equivalent to being in spec/controllers&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The different available types are documented in each of the different spec
types, for instance &lt;a href="https://relishapp.com/rspec/rspec-rails/v/3-0/docs/controller-specs"&gt;documentation for controller
specs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/issues/662"&gt;rspec-rails #662 - original discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/pull/970"&gt;rspec-rails #970 - implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="extracted-activemodel-mocks-support"&gt;Extracted activemodel mocks support&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mock_model&lt;/code&gt; and &lt;code&gt;stub_model&lt;/code&gt; have been extracted into the &lt;a href="https://github.com/rspec/rspec-activemodel-mocks"&gt;rspec-activemodel-mocks
gem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/thomas-holmes"&gt;Thomas Holmes&lt;/a&gt; for doing the
extraction and for offering to maintain the new gem.&lt;/p&gt;

&lt;h3 id="dropped-webrat-support"&gt;Dropped webrat support&lt;/h3&gt;

&lt;p&gt;Webrat support has been removed. Use capybara instead.&lt;/p&gt;

&lt;h3 id="anonymous-controller-improvements"&gt;Anonymous controller improvements&lt;/h3&gt;

&lt;p&gt;rspec-rails has long allowed you to create anonymous controllers for testing.
In RSpec 3 they have received some improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By default they will inherit from the described class rather than
&lt;code&gt;AppplicationController&lt;/code&gt;. This behaviour can be disabled with the
&lt;code&gt;infer_base_class_for_anonymous_controllers&lt;/code&gt; configuration option.&lt;/li&gt;
  &lt;li&gt;Many bugfixes when using in "non-standard" contexts, such as with abstract
parents or with no &lt;code&gt;ApplicationController&lt;/code&gt;. If you have had issues with
anonymous controllers in the past, now would be a good time to try them
again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-rails/v/3-0/docs/controller-specs/anonymous-controller"&gt;Documentation - Anonymous controllers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/pull/893"&gt;rspec-rails #893 - Enable infering base class by default&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/pull/905"&gt;rspec-rails #905 - Fix anonymous controller route helpers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/pull/924"&gt;rspec-rails #924 - Don't assume presence of ApplicationController&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="final-words"&gt;Final words&lt;/h2&gt;

&lt;p&gt;As always, full changelogs are available for each for the subprojects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-core/blob/master/Changelog.md"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-expectations/blob/master/Changelog.md"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-mocks/blob/master/Changelog.md"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rspec/rspec-rails/blob/master/Changelog.md"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RSpec 3 is the first major release of RSpec in nearly 4 years. It
represents a huge amount of work from a large number of contributors.&lt;/p&gt;

&lt;p&gt;We hope you like the new changes as much as we do, no matter how you use RSpec.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to Xavier Shay for helping write this blog post and to Jon Rowe,
Sam Phippen and Aaron Kromer for proofreading it.&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>RSpec 2.99 and 3.0 RC1 have been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/05/rspec-2-99-and-3-0-rc-1-have-been-released/"/>
    <id>http://rspec.info/blog/2014/05/rspec-2-99-and-3-0-rc-1-have-been-released/</id>
    <published>2014-05-17T17:00:00-07:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;The RSpec team has released 3.0.0.rc1 and 2.99.0.rc1! Barring
a new major issue being reported, this will be the last prerelease,
and we'll release 2.99.0 and 3.0.0 final in 2 weeks.&lt;/p&gt;

&lt;p&gt;If you're upgrading a project from 2.x, check out the &lt;a href="https://relishapp.com/rspec/docs/upgrade"&gt;upgrade
instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're curious about what's new in RSpec 3, check back
in a few days â€“ I'll be posting full list of notable changes
in RSpec 3 soon.&lt;/p&gt;

&lt;p&gt;Thanks to all the contributors who helped make this release happen!&lt;/p&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-2990rc1"&gt;rspec-core 2.99.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v2.99.0.beta2...v2.99.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;--deprecation-out&lt;/code&gt; CLI option which directs deprecation warnings
to the named file. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Backport support for &lt;code&gt;skip&lt;/code&gt; in metadata to skip execution of an example.
(Xavier Shay, #1472)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;Pathname&lt;/code&gt; support for setting all output streams. (Aaron Kromer)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;test_unit&lt;/code&gt; and &lt;code&gt;minitest&lt;/code&gt; expectation frameworks. (Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::Pending::PendingDeclaredInExample&lt;/code&gt;, use
&lt;code&gt;SkipDeclaredInExample&lt;/code&gt; instead. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Issue a deprecation when &lt;code&gt;described_class&lt;/code&gt; is accessed from within
a nested &lt;code&gt;describe &amp;lt;SomeClass&amp;gt;&lt;/code&gt; example group, since &lt;code&gt;described_class&lt;/code&gt;
will return the innermost described class in RSpec 3 rather than the
outermost described class, as it behaved in RSpec 2. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::FilterManager::DEFAULT_EXCLUSIONS&lt;/code&gt;,
&lt;code&gt;RSpec::Core::FilterManager::STANDALONE_FILTERS&lt;/code&gt; and use of
&lt;code&gt;#empty_without_conditional_filters?&lt;/code&gt; on those filters. (Sergey Pchelincev)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::Example#options&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::Example#metadata&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Issue warning when passing a symbol or hash to &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt;
as the first argument. In RSpec 2.x this would be treated as metadata
but in RSpec 3 it'll be treated as the described object. To continue
having it treated as metadata, pass a description before the symbol or
hash. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::BaseTextFormatter::VT100_COLORS&lt;/code&gt; and
&lt;code&gt;RSpec::Core::BaseTextFormatter::VT100_COLOR_CODES&lt;/code&gt; in favour
of &lt;code&gt;RSpec::Core::BaseTextFormatter::ConsoleCodes::VT100_CODES&lt;/code&gt; and
&lt;code&gt;RSpec::Core::BaseTextFormatter::ConsoleCodes::VT100_CODE_VALUES&lt;/code&gt;.
(Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::ExampleGroup.display_name&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::ExampleGroup.description&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::ExampleGroup.describes&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::ExampleGroup.described_class&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::ExampleGroup.alias_example_to&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::Configuration#alias_example_to&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::ExampleGroup.alias_it_behaves_like_to&lt;/code&gt; in favor
of &lt;code&gt;RSpec::Core::Configuration#alias_it_behaves_like_to&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::ExampleGroup.focused&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::ExampleGroup.focus&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add deprecation warning for &lt;code&gt;config.filter_run :focused&lt;/code&gt; since
example aliases &lt;code&gt;fit&lt;/code&gt; and &lt;code&gt;focus&lt;/code&gt; will no longer include
&lt;code&gt;:focused&lt;/code&gt; metadata but will continue to include &lt;code&gt;:focus&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate filtering by &lt;code&gt;:line_number&lt;/code&gt; (e.g. &lt;code&gt;--line-number&lt;/code&gt; from the
CLI). Use location filtering instead. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;--default_path&lt;/code&gt; as an alternative to &lt;code&gt;--default-path&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::Configuration#warnings&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::Configuration#warnings?&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;share_examples_for&lt;/code&gt; in favor of &lt;code&gt;shared_examples_for&lt;/code&gt; or
just &lt;code&gt;shared_examples&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::CommandLine&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::Runner&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;#color_enabled&lt;/code&gt;, &lt;code&gt;#color_enabled=&lt;/code&gt; and &lt;code&gt;#color?&lt;/code&gt; in favour of
&lt;code&gt;#color&lt;/code&gt;, &lt;code&gt;#color=&lt;/code&gt; and &lt;code&gt;#color_enabled? output&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;#filename_pattern&lt;/code&gt; in favour of &lt;code&gt;#pattern&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;#backtrace_cleaner&lt;/code&gt; in favour of &lt;code&gt;#backtrace_formatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate mutating &lt;code&gt;RSpec::Configuration#formatters&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;stdlib&lt;/code&gt; as an available expectation framework in favour of
&lt;code&gt;test_unit&lt;/code&gt; and &lt;code&gt;minitest&lt;/code&gt;. (Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Issue a warning when you set &lt;code&gt;config.deprecation_stream&lt;/code&gt; too late for
it to take effect because the reporter has already been setup. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;skip&lt;/code&gt; with a block should not execute the block. (Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core-300rc1"&gt;rspec-core 3.0.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.0.0.beta2...v3.0.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change &lt;code&gt;described_class&lt;/code&gt; so that in a nested group like &lt;code&gt;describe
MyClass&lt;/code&gt;, it returns &lt;code&gt;MyClass&lt;/code&gt; rather than the outer group's described
class. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Refactor filter manager so that it no longer subclasses Hash and has a
tighter, more domain-specific interface. (Sergey Pchelincev)&lt;/li&gt;
  &lt;li&gt;Remove legacy colours definitions from &lt;code&gt;BaseTextFormatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Remove console color definitions from &lt;code&gt;BaseTextFormatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Restructure example group metadata so that the computed keys are
exposed directly off of the metadata hash rather than being on
a nested &lt;code&gt;:example_group&lt;/code&gt; subhash. In addition, the parent example
group metadata is now available as &lt;code&gt;[:parent_example_group]&lt;/code&gt; rather
than &lt;code&gt;[:example_group][:example_group]&lt;/code&gt;. Deprecated access via the
old key structure is still provided. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;:describes&lt;/code&gt; metadata key. It duplicates &lt;code&gt;:described_class&lt;/code&gt;
for no good reason. Deprecated access via &lt;code&gt;:describes&lt;/code&gt; is still
provided. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Rename &lt;code&gt;:example_group_block&lt;/code&gt; metadata key to &lt;code&gt;:block&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;RSpec::Core::Example#options&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Move &lt;code&gt;BaseTextFormatter#colorize_summary&lt;/code&gt; to &lt;code&gt;SummaryNotification#colorize_with&lt;/code&gt;
(Jon Rowe).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;describe some_hash&lt;/code&gt; treated &lt;code&gt;some_hash&lt;/code&gt; as metadata in RSpec 2.x but
will treat it as the described object in RSpec 3.0. Metadata must
always come after the description args. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;display_name&lt;/code&gt; alias of &lt;code&gt;ExampleGroup.description&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;describes&lt;/code&gt; alias of &lt;code&gt;ExampleGroup.described_class&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;RSpec::Core::ExampleGroup.alias_it_behaves_like_to&lt;/code&gt;.
Use &lt;code&gt;RSpec::Core::Configuration#alias_it_behaves_like_to&lt;/code&gt; instead.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;RSpec::Core::ExampleGroup.alias_example_to&lt;/code&gt;.
Use &lt;code&gt;RSpec::Core::Configuration#alias_example_to&lt;/code&gt; instead.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Removed &lt;code&gt;focused&lt;/code&gt; example alias and change example/group aliases
&lt;code&gt;fit&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;fcontext&lt;/code&gt; and &lt;code&gt;fdescribe&lt;/code&gt; to no longer include
&lt;code&gt;:focused =&amp;gt; true&lt;/code&gt; metadata. They only contain &lt;code&gt;:focus =&amp;gt; true&lt;/code&gt;
metadata now. This means that you will need to filter them with
&lt;code&gt;filter_run :focus&lt;/code&gt;, not &lt;code&gt;filter_run :focused&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;--line-number&lt;/code&gt; filtering. It's semantically dubious since it's
a global filter (potentially applied to multiple files) but there's no
meaningful connection between the same line number in multiple files.
Instead use the &lt;code&gt;rspec path/to/spec.rb:23:46&lt;/code&gt; form, which is terser
and makes more sense as it is scoped to a file. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;--default_path&lt;/code&gt; as an alias for &lt;code&gt;--default-path&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;share_examples_for&lt;/code&gt;. There's still
&lt;code&gt;shared_examples&lt;/code&gt; and &lt;code&gt;shared_examples_for&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Rename &lt;code&gt;RSpec::Core::Configuration#warnings&lt;/code&gt; to
&lt;code&gt;RSpec::Core::Configuration#warnings?&lt;/code&gt; since it's a boolean flag.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;RSpec's global state is no longer reset after a spec run. This gives
more flexibility to alternate runners to decide when and if they
want the state reset. Alternate runners are now responsible for
calling this (or doing a similar reset) if they are going to run
the spec suite multiple times in the same process. (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Merge &lt;code&gt;RSpec::Core::CommandLine&lt;/code&gt; (never formally declared public)
into &lt;code&gt;RSpec::Core::Runner&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;color_enabled&lt;/code&gt; as an alias of &lt;code&gt;color&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;backtrace_cleaner&lt;/code&gt; as an alias of &lt;code&gt;backtrace_formatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;filename_pattern&lt;/code&gt; as an alias of &lt;code&gt;pattern&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Extract support for legacy formatters to &lt;code&gt;rspec-legacy_formatters&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;RSpec::Configuration#formatters&lt;/code&gt; now returns a dup to prevent mutation. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Replace &lt;code&gt;stdlib&lt;/code&gt; as an available expectation framework with &lt;code&gt;test_unit&lt;/code&gt; and
&lt;code&gt;minitest&lt;/code&gt;. (Aaron Kromer)&lt;/li&gt;
  &lt;li&gt;Remove backtrace formatting helpers from &lt;code&gt;BaseTextFormatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Extract profiler support to &lt;code&gt;ProfileFormatter&lt;/code&gt; and &lt;code&gt;ProfileNotification&lt;/code&gt;.
Formatters should implement &lt;code&gt;dump_profile&lt;/code&gt; if they wish to respond to &lt;code&gt;--profile&lt;/code&gt;.
(Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Extract remaining formatter state to reporter and notifications. Introduce
&lt;code&gt;ExamplesNotification&lt;/code&gt; to share information about examples that was previously
held in &lt;code&gt;BaseFormatter&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;config.default_formatter&lt;/code&gt; attribute, which can be used to set a
formatter which will only be used if no other formatter is set
(e.g. via &lt;code&gt;--formatter&lt;/code&gt;). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Support legacy colour definitions in &lt;code&gt;LegacyFormatterAdaptor&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Migrate &lt;code&gt;execution_result&lt;/code&gt; (exposed by metadata) from a hash to a
first-class object with appropriate attributes. &lt;code&gt;status&lt;/code&gt; is now
stored and returned as a symbol rather than a string. It retains
deprecated hash behavior for backwards compatibility. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Provide console code helper for formatters. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Use raw ruby hashes for the metadata hashes rather than a subclass of
a hash. Computed metadata entries are now computed in advance rather
than being done lazily on first access. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;:block&lt;/code&gt; metadata entry to the example metadata, bringing
parity with &lt;code&gt;:block&lt;/code&gt; in the example group metadata. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;fspecify&lt;/code&gt; and &lt;code&gt;fexample&lt;/code&gt; as aliases of &lt;code&gt;specify&lt;/code&gt; and &lt;code&gt;example&lt;/code&gt;
with &lt;code&gt;:focus =&amp;gt; true&lt;/code&gt; metadata for parity with &lt;code&gt;fit&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add legacy support for &lt;code&gt;colorize_summary&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Restructure runner so it can be more easily customized in a subclass
for an alternate runner. (Ben Hoskings)&lt;/li&gt;
  &lt;li&gt;Document &lt;code&gt;RSpec::Core::ConfigurationOptions&lt;/code&gt; as an officially
supported public API. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;--deprecation-out&lt;/code&gt; CLI option which directs deprecation warnings
to the named file. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Minitest 5 compatability for &lt;code&gt;expect_with :stdlib&lt;/code&gt; (now available as
&lt;code&gt;expect_with :minitest&lt;/code&gt;). (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Reporter now notifies formatters of the load time of RSpec and your
specs via &lt;code&gt;StartNotification&lt;/code&gt; and &lt;code&gt;SummaryNotification&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;disable_monkey_patching!&lt;/code&gt; config option that disables all monkey
patching from whatever pieces of RSpec you use. (Alexey Fedorov)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;Pathname&lt;/code&gt; support for setting all output streams. (Aaron Kromer)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.define_derived_metadata&lt;/code&gt;, which can be used to apply
additional metadata to all groups or examples that match a given
filter. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Provide formatted and colorized backtraces via &lt;code&gt;FailedExampleNotification&lt;/code&gt;
and send &lt;code&gt;PendingExampleFixedNotifications&lt;/code&gt; when the error is due to a
passing spec you expect to fail. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;dump_profile&lt;/code&gt; to formatter API to allow formatters to implement
support for &lt;code&gt;--profile&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Allow colourising text via &lt;code&gt;ConsoleCodes&lt;/code&gt; with RSpec 'states'
(e.g. &lt;code&gt;:success&lt;/code&gt;, &lt;code&gt;:failure&lt;/code&gt;) rather than direct colour codes. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Expose &lt;code&gt;fully_formatted&lt;/code&gt; methods off the formatter notification objects
that make it easy for a custom formatter to produce formatted output
like rspec-core's. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;spec_helper.rb&lt;/code&gt; file generated by &lt;code&gt;rspec --init&lt;/code&gt; so that the
recommended settings correctly use the documentation formatter
when running one file. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix ordering problem where descriptions were generated after
tearing down mocks, which resulted in unexpected exceptions.
(Bradley Schaefer, Aaron Kromer, Andrey Savchenko)&lt;/li&gt;
  &lt;li&gt;Allow a symbol to be used as an implicit subject (e.g. &lt;code&gt;describe :foo&lt;/code&gt;).
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Prevent creating an isolated context (i.e. using &lt;code&gt;RSpec.describe&lt;/code&gt;) when
already inside a context. There is no reason to do this, and it could
potentially cause unexpected bugs. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Fix shared example group scoping so that when two shared example
groups share the same name at different levels of nested contexts,
the one in the nearest context is used. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;--warnings&lt;/code&gt; option so that it enables warnings immediately so
that it applies to files loaded by &lt;code&gt;--require&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Issue a warning when you set &lt;code&gt;config.deprecation_stream&lt;/code&gt; too late for
it to take effect because the reporter has already been setup. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add the full &lt;code&gt;RSpec::Core::Example&lt;/code&gt; interface to the argument yielded
to &lt;code&gt;around&lt;/code&gt; hooks. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Line number always takes precendence when running specs with filters.
(Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Ensure :if and :unless metadata filters are treated as a special case
and are always in-effect. (Bradley Schaefer)&lt;/li&gt;
  &lt;li&gt;Ensure the currently running installation of RSpec is used when
the rake task shells out to &lt;code&gt;rspec&lt;/code&gt;, even if a newer version is also
installed. (Postmodern)&lt;/li&gt;
  &lt;li&gt;Using a legacy formatter as default no longer causes an infinite loop.
(Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-2990rc1"&gt;rspec-expectations 2.99.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v2.99.0.beta2...2.99.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate &lt;code&gt;matcher_execution_context&lt;/code&gt; attribute on DSL-defined
custom matchers. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Matchers::Pretty#_pretty_print&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Matchers::Pretty#expected_to_sentence&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Matchers::Configuration&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Expectations::Configuration&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;be_xyz&lt;/code&gt; predicate matcher on an object that doesn't respond to
&lt;code&gt;xyz?&lt;/code&gt; or &lt;code&gt;xyzs?&lt;/code&gt;. (Daniel Fone)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;have_xyz&lt;/code&gt; matcher on an object that doesn't respond to &lt;code&gt;has_xyz?&lt;/code&gt;.
(Daniel Fone)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;have_xyz&lt;/code&gt; matcher on an object that has a private method &lt;code&gt;has_xyz?&lt;/code&gt;.
(Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Issue a deprecation warning when a block expectation expression is
used with a matcher that doesn't explicitly support block expectations
via &lt;code&gt;supports_block_expectations?&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;require 'rspec-expectations'&lt;/code&gt;. Use
&lt;code&gt;require 'rspec/expectations'&lt;/code&gt; instead. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-300rc1"&gt;rspec-expectations 3.0.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.0.0.beta2...v3.0.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove &lt;code&gt;matcher_execution_context&lt;/code&gt; attribute from DSL-defined
custom matchers. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;RSpec::Matchers::Pretty#_pretty_print&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;RSpec::Matchers::Pretty#expected_to_sentence&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Rename &lt;code&gt;RSpec::Matchers::Configuration&lt;/code&gt; constant to
&lt;code&gt;RSpec::Expectations::Configuration&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Prevent &lt;code&gt;have_xyz&lt;/code&gt; predicate matchers using private methods.
(Adrian Gonzalez)&lt;/li&gt;
  &lt;li&gt;Block matchers must now implement &lt;code&gt;supports_block_expectations?&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Stop supporting &lt;code&gt;require 'rspec-expectations'&lt;/code&gt;.
Use &lt;code&gt;require 'rspec/expectations'&lt;/code&gt; instead. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;NoMethodError&lt;/code&gt; triggered by beta2 when &lt;code&gt;YARD&lt;/code&gt; was loaded in
the test environment. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;be_xyz&lt;/code&gt; matcher to accept a &lt;code&gt;do...end&lt;/code&gt; block. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix composable matcher failure message generation logic
so that it does not blow up when given &lt;code&gt;$stdout&lt;/code&gt; or &lt;code&gt;$stderr&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;change&lt;/code&gt; matcher to work properly with &lt;code&gt;IO&lt;/code&gt; objects.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;exist&lt;/code&gt; matcher so that it can be used in composed matcher
expressions involving objects that do not implement &lt;code&gt;exist?&lt;/code&gt; or
&lt;code&gt;exists?&lt;/code&gt;. (Daniel Fone)&lt;/li&gt;
  &lt;li&gt;Fix composable matcher match logic so that it clones matchers
before using them in order to work properly with matchers
that use internal memoization based on a given &lt;code&gt;actual&lt;/code&gt; value.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;be_xyz&lt;/code&gt; and &lt;code&gt;has_xyz&lt;/code&gt; predicate matchers so that they can
be used in composed matcher expressions involving objects that
do not implement the predicate method. (Daniel Fone)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Document the remaining public APIs. rspec-expectations now has 100% of
the public API documented and will remain that way (as new undocumented
methods will fail the build). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Improve the formatting of BigDecimal objects in &lt;code&gt;eq&lt;/code&gt; matcher failure
messages. (Daniel Fone)&lt;/li&gt;
  &lt;li&gt;Improve the failure message for &lt;code&gt;be_xyz&lt;/code&gt; predicate matchers so
that it includes the &lt;code&gt;inspect&lt;/code&gt; output of the receiver.
(Erik Michaels-Ober, Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;all&lt;/code&gt; matcher, to allow you to specify that a given matcher
matches all elements in a collection:
&lt;code&gt;expect([1, 3, 5]).to all( be_odd )&lt;/code&gt;. (Adam Farhi)&lt;/li&gt;
  &lt;li&gt;Add boolean aliases (&lt;code&gt;&amp;amp;&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt;) for compound operators (&lt;code&gt;and&lt;/code&gt;/&lt;code&gt;or&lt;/code&gt;). (Adam Farhi)&lt;/li&gt;
  &lt;li&gt;Give users a clear error when they wrongly use a value matcher
in a block expectation expression (e.g. &lt;code&gt;expect { 3 }.to eq(3)&lt;/code&gt;)
or vice versa.  (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-2990rc1"&gt;rspec-mocks 2.99.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v2.99.0.beta2...v2.99.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Mocks::TestDouble.extend_onto&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Mocks::ConstantStubber&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;Marshal.dump&lt;/code&gt; monkey-patch without opt-in. (Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-300rc1"&gt;rspec-mocks 3.0.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.0.0.beta2...v3.0.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove &lt;code&gt;RSpec::Mocks::TestDouble.extend_onto&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;RSpec::Mocks::ConstantStubber&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Make monkey-patch of Marshal to support dumping of stubbed objects opt-in.
(Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of crashing when cleaning up stub methods on a frozen object, it now
issues a warning explaining that it's impossible to clean up the stubs.
(Justin Coyne and Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Add meaningful descriptions to &lt;code&gt;anything&lt;/code&gt;, &lt;code&gt;duck_type&lt;/code&gt; and &lt;code&gt;instance_of&lt;/code&gt; argument
matchers. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix regression introduced in 3.0.0.beta2 that caused
&lt;code&gt;double.as_null_object.to_str&lt;/code&gt; to return the double rather
than a string. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix bug in &lt;code&gt;expect(dbl).to receive_message_chain(:foo, :bar)&lt;/code&gt; where it was
not setting an expectation for the last message in the chain.
(Jonathan del Strother)&lt;/li&gt;
  &lt;li&gt;Allow verifying partial doubles to have private methods stubbed. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Fix bug with allowing/expecting messages on Class objects which have had
their singleton class prepended to. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Fix an issue with 1.8.7 not running implementation blocks on partial doubles.
(MaurÃ­cio Linhares)&lt;/li&gt;
  &lt;li&gt;Prevent &lt;code&gt;StackLevelTooDeep&lt;/code&gt; errors when stubbing an &lt;code&gt;any_instance&lt;/code&gt; method that's
accessed in &lt;code&gt;inspect&lt;/code&gt; by providing our own inspect output. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Fix bug in &lt;code&gt;any_instance&lt;/code&gt; logic that did not allow you to mock or stub
private methods if &lt;code&gt;verify_partial_doubles&lt;/code&gt; was configured. (Oren Dobzinski)&lt;/li&gt;
  &lt;li&gt;Include useful error message when trying to observe an unimplemented method
on an any instance. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;and_call_original&lt;/code&gt; to work properly when multiple classes in an
inheritance hierarchy have been stubbed with the same method. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;any_instance&lt;/code&gt; so that it updates existing instances that have
already been stubbed. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix verified doubles so that their class name is included in failure
messages. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;expect_any_instance_of&lt;/code&gt; so that when the message is received
on an individual instance that has been directly stubbed, it still
satisfies the expectation. (Sam Phippen, Myron Marston)&lt;/li&gt;
  &lt;li&gt;Explicitly disallow using &lt;code&gt;any_instance&lt;/code&gt; to mock or stub a method
that is defined on a module prepended onto the class. This triggered
&lt;code&gt;SystemStackError&lt;/code&gt; before and is very hard to support so we are not
supporting it at this time. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-2990rc1"&gt;rspec-rails 2.99.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v2.99.0.beta2...v2.99.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecates &lt;code&gt;stub_model&lt;/code&gt; and &lt;code&gt;mock_model&lt;/code&gt; in favor of the
&lt;code&gt;rspec-activemodel-mocks&lt;/code&gt; gem. (Thomas Holmes)&lt;/li&gt;
  &lt;li&gt;Issue a deprecation to instruct users to configure
&lt;code&gt;config.infer_spec_type_from_file_location!&lt;/code&gt; during the
upgrade process since spec type inference is opt-in in 3.0.
(Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Issue a deprecation when &lt;code&gt;described_class&lt;/code&gt; is accessed in a controller
example group that has used the &lt;code&gt;controller { }&lt;/code&gt; macro to generate an
anonymous controller class, since in 2.x, &lt;code&gt;described_class&lt;/code&gt; would
return that generated class but in 3.0 it will continue returning the
class passed to &lt;code&gt;describe&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-300rc1"&gt;rspec-rails 3.0.0.rc1&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.0.0.beta2...v3.0.0.rc1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extracts the &lt;code&gt;mock_model&lt;/code&gt; and &lt;code&gt;stub_model&lt;/code&gt; methods to the
&lt;code&gt;rspec-activemodel-mocks&lt;/code&gt; gem. (Thomas Holmes)&lt;/li&gt;
  &lt;li&gt;Spec types are no longer inferred by location, they instead need to be
explicitly tagged. The old behaviour is enabled by
&lt;code&gt;config.infer_spec_type_from_file_location!&lt;/code&gt;, which is still supplied
in the default generated &lt;code&gt;spec_helper.rb&lt;/code&gt;. (Xavier Shay, Myron Marston)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;controller&lt;/code&gt; macro in controller specs no longer mutates
&lt;code&gt;:described_class&lt;/code&gt; metadata. It still overrides the subject and sets
the controller, though. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Stop depending on or requiring &lt;code&gt;rspec-collection_matchers&lt;/code&gt;. Users who
want those matchers should add the gem to their Gemfile and require it
themselves. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Removes runtime dependency on &lt;code&gt;ActiveModel&lt;/code&gt;. (Rodrigo Rosenfeld Rosas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supports Rails 4.x reference attribute ids in generated scaffold for view
specs. (Giovanni Cappellotto)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;have_http_status&lt;/code&gt; matcher. (Aaron Kromer)&lt;/li&gt;
  &lt;li&gt;Add spec type metadata to generator templates. (Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix an inconsistency in the generated scaffold specs for a controller. (Andy Waite)&lt;/li&gt;
  &lt;li&gt;Ensure &lt;code&gt;config.before(:all, :type =&amp;gt; &amp;lt;type&amp;gt;)&lt;/code&gt; hooks run before groups
of the given type, even when the type is inferred by the file
location. (Jon Rowe, Myron Marston)&lt;/li&gt;
  &lt;li&gt;Switch to parsing params with &lt;code&gt;Rack::Utils::parse_nested_query&lt;/code&gt; to match Rails.
(Tim Watson)&lt;/li&gt;
  &lt;li&gt;Fix incorrect namespacing of anonymous controller routes. (Aaron Kromer)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 2.99 and 3.0 beta2 have been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2014/02/rspec-2-99-and-3-0-beta-2-have-been-released/"/>
    <id>http://rspec.info/blog/2014/02/rspec-2-99-and-3-0-beta-2-have-been-released/</id>
    <published>2014-02-20T16:00:00-08:00</published>
    <updated>2015-01-29T00:16:43-08:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;The RSpec team has released 3.0.0.beta2 and 2.99.0.beta2.&lt;/p&gt;

&lt;p&gt;This is a huge release that includes tons of new features.
I plan to do a full blog post listing and giving examples for
all the notable new 3.0 features at a later date. For now, I've
just got the full release notes.&lt;/p&gt;

&lt;p&gt;Thanks to all the contributors who helped make this release happen!&lt;/p&gt;

&lt;p&gt;I also want to thank those of you who have put your projects though
the upgrade process and have been using 3.0.0.beta1â€“your feedback
has been invaluable.&lt;/p&gt;

&lt;p&gt;For more details on the upgrade process, see the &lt;a href="/blog/2013/11/rspec-2-99-and-3-0-betas-have-been-released#the_upgrade_process"&gt;beta1
annoucement&lt;/a&gt;
blog post.&lt;/p&gt;

&lt;p&gt;This will be the last 2.99/3.0 beta release. Next up are the release
candidates!&lt;/p&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-2990beta2"&gt;rspec-core 2.99.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v2.99.0.beta1...v2.99.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;is_expected&lt;/code&gt; for one-liners that read well with the
&lt;code&gt;expect&lt;/code&gt;-based syntax. &lt;code&gt;is_expected&lt;/code&gt; is simply defined as
&lt;code&gt;expect(subject)&lt;/code&gt; and can be used in an expression like:
&lt;code&gt;it { is_expected.to read_well }&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Backport &lt;code&gt;skip&lt;/code&gt; from RSpec 3, which acts like &lt;code&gt;pending&lt;/code&gt; did in RSpec 2
when not given a block, since the behavior of &lt;code&gt;pending&lt;/code&gt; is changing in
RSpec 3. (Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate inexact &lt;code&gt;mock_with&lt;/code&gt; config options. RSpec 3 will only support
the exact symbols &lt;code&gt;:rspec&lt;/code&gt;, &lt;code&gt;:mocha&lt;/code&gt;, &lt;code&gt;:flexmock&lt;/code&gt;, &lt;code&gt;:rr&lt;/code&gt; or &lt;code&gt;:nothing&lt;/code&gt;
(or any module that implements the adapter interface). RSpec 2 did
fuzzy matching but this will not be supported going forward.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;show_failures_in_pending_blocks&lt;/code&gt; config option. To achieve
the same behavior as the option enabled, you can use a custom
formatter instead. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Add a deprecation warning for the fact that the behavior of &lt;code&gt;pending&lt;/code&gt;
is changing in RSpec 3 â€“ rather than skipping the example (as it did
in 2.x when no block was provided), it will run the example and mark
it as failed if no exception is raised. Use &lt;code&gt;skip&lt;/code&gt; instead to preserve
the old behavior. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Deprecate 's', 'n', 'spec' and 'nested' as aliases for documentation
formatter. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Core::Reporter#abort&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Core::Reporter#finish&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix failure (undefined method &lt;code&gt;path&lt;/code&gt;) in end-of-run summary
when &lt;code&gt;raise_errors_for_deprecations!&lt;/code&gt; is configured. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix issue were overridding spec ordering from the command line wasn't
fully recognised interally. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core-300beta2"&gt;rspec-core 3.0.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.0.0.beta1...v3.0.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;code&gt;mock_with&lt;/code&gt; option more strict. Strings are no longer supported
(e.g. &lt;code&gt;mock_with "mocha"&lt;/code&gt;) â€“ use a symbol instead. Also, unrecognized
values will now result in an error rather than falling back to the
null mocking adapter. If you want to use the null mocking adapter,
use &lt;code&gt;mock_with :nothing&lt;/code&gt; (as has been documented for a long time).
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for overriding RSpec's built-in &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;
filters. (Ashish Dixit)&lt;/li&gt;
  &lt;li&gt;Custom formatters are now required to call
&lt;code&gt;RSpec::Core::Formatters.register(formatter_class, *notifications)&lt;/code&gt;
where &lt;code&gt;notifications&lt;/code&gt; is the list of events the formatter wishes to
be notified about. Notifications are handled by methods matching the
names on formatters. This allows us to add or remove notifications
without breaking existing formatters. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Change arguments passed to formatters. Rather than passing multiple
arguments (which limits are ability to add additional arguments as
doing so would break existing formatters), we now pass a notification
value object that exposes the same data via attributes. This will
allow us to add new bits of data to a notification event without
breaking existing formattesr. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;:alias&lt;/code&gt; option for
&lt;code&gt;RSpec.configuration.add_setting&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;RSpec.configuration.requires = [...]&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;--formatter&lt;/code&gt; CLI option. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;--configure&lt;/code&gt; CLI option. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;RSpec::Core::RakeTask#spec_opts=&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;An example group level &lt;code&gt;pending&lt;/code&gt; block or &lt;code&gt;:pending&lt;/code&gt; metadata now executes
the example and cause a failure if it passes, otherwise it will be pending if
it fails. The old "never run" behaviour is still used for &lt;code&gt;xexample&lt;/code&gt;, &lt;code&gt;xit&lt;/code&gt;,
and &lt;code&gt;xspecify&lt;/code&gt;, or via a new &lt;code&gt;skip&lt;/code&gt; method or &lt;code&gt;:skip&lt;/code&gt; metadata option.
(Xavier Shay)&lt;/li&gt;
  &lt;li&gt;After calling &lt;code&gt;pending&lt;/code&gt; inside an example, the remainder of the example will
now be run. If it passes a failure is raised, otherwise the example is marked
pending. The old "never run" behaviour is provided a by a new &lt;code&gt;skip&lt;/code&gt; method.
(Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Pending blocks inside an example have been removed as a feature with no
direct replacement. Use &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;pending&lt;/code&gt; without a block. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Pending statement is no longer allowed in &lt;code&gt;before(:all)&lt;/code&gt; hooks. Use &lt;code&gt;skip&lt;/code&gt;
instead.  (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;show_failures_in_pending_blocks&lt;/code&gt; configuration option. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Remove support for specifying the documentation formatter using
's', 'n', 'spec' or 'nested'. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add example run time to JSON formatter output. (Karthik Kastury)&lt;/li&gt;
  &lt;li&gt;Add more suggested settings to the files generated by
&lt;code&gt;rspec --init&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.alias_example_group_to&lt;/code&gt;, which can be used to define a
new method that defines an example group with the provided metadata.
(Michi Huber)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;xdescribe&lt;/code&gt; and &lt;code&gt;xcontext&lt;/code&gt; as shortcuts to make an example group
pending. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;fdescribe&lt;/code&gt; and &lt;code&gt;fcontext&lt;/code&gt; as shortcuts to focus an example group.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Don't autorun specs via &lt;code&gt;#at_exit&lt;/code&gt; by default. &lt;code&gt;require 'rspec/autorun'&lt;/code&gt;
is only needed when running specs via &lt;code&gt;ruby&lt;/code&gt;, as it always has been.
Running specs via &lt;code&gt;rake&lt;/code&gt; or &lt;code&gt;rspec&lt;/code&gt; are both unaffected. (Ben Hoskings)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;expose_dsl_globally&lt;/code&gt; config option, defaulting to true. When disabled
it will remove the monkey patches rspec-core adds to &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;Module&lt;/code&gt;
(e.g. &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;shared_examples_for&lt;/code&gt;, etc).  (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Expose RSpec DSL entry point methods (&lt;code&gt;describe&lt;/code&gt;,
&lt;code&gt;shared_examples_for&lt;/code&gt;, etc) on the &lt;code&gt;RSpec&lt;/code&gt; constant. Intended for use
when &lt;code&gt;expose_dsl_globally&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;For consistency, expose all example group aliases (including
&lt;code&gt;context&lt;/code&gt;) on the &lt;code&gt;RSpec&lt;/code&gt; constant. If &lt;code&gt;expose_dsl_globally&lt;/code&gt; is set to
&lt;code&gt;true&lt;/code&gt;, also expose them on &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;Module&lt;/code&gt;. Historically, only &lt;code&gt;describe&lt;/code&gt;
was exposed. (Jon Rowe, Michi Huber)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix failure (undefined method &lt;code&gt;path&lt;/code&gt;) in end-of-run summary
when &lt;code&gt;raise_errors_for_deprecations!&lt;/code&gt; is configured. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Issue error when attempting to use -i or â€“I on command line,
too close to -I to be considered short hand for â€“init. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Prevent adding formatters to an output target if the same
formatter has already been added to that output. (Alex Peattie)&lt;/li&gt;
  &lt;li&gt;Allow a matcher-generated example description to be used when
the example is pending. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Ensure the configured &lt;code&gt;failure_exit_code&lt;/code&gt; is used by the rake
task when there is a failure. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Restore behaviour whereby system exclusion filters take priority over working
directory (was broken in beta1). (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Prevent RSpec mangling file names that have substrings containing &lt;code&gt;line_number&lt;/code&gt;
or &lt;code&gt;default_path&lt;/code&gt;. (Matijs van Zuijlen)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-2990beta2"&gt;rspec-expectations 2.99.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v2.99.0.beta1...v2.99.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate chaining &lt;code&gt;by&lt;/code&gt;, &lt;code&gt;by_at_least&lt;/code&gt;, &lt;code&gt;by_at_most&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; off of
&lt;code&gt;expect { }.not_to change { }&lt;/code&gt;. The docs have always said these are
not supported for the negative form but now they explicitly raise
errors in RSpec 3. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Change the semantics of &lt;code&gt;expect { }.not_to change { x }.from(y)&lt;/code&gt;.
In RSpec 2.x, this expectation would only fail if &lt;code&gt;x&lt;/code&gt; started with
the value of &lt;code&gt;y&lt;/code&gt; and changed. If it started with a different value
and changed, it would pass. In RSpec 3, it will pass only if the
value starts at &lt;code&gt;y&lt;/code&gt; and it does not change. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;matcher == value&lt;/code&gt; as an alias for &lt;code&gt;matcher.matches?(value)&lt;/code&gt;,
in favor of &lt;code&gt;matcher === value&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Matchers::OperatorMatcher&lt;/code&gt; in favor of
&lt;code&gt;RSpec::Matchers::BuiltIn::OperatorMatcher&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate auto-integration with Test::Unit and minitest.
Instead, include &lt;code&gt;RSpec::Matchers&lt;/code&gt; in the appropriate test case
base class yourself. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate treating &lt;code&gt;#expected&lt;/code&gt; on a DSL-generated custom matcher
as an array when only 1 argument is passed to the matcher method.
In RSpec 3 it will be the single value in order to make diffs
work properly. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-300beta2"&gt;rspec-expectations 3.0.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.0.0.beta1...v3.0.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove deprecated support for accessing the &lt;code&gt;RSpec&lt;/code&gt; constant using
&lt;code&gt;Rspec&lt;/code&gt; or &lt;code&gt;Spec&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;RSpec::Expectations.differ=&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for deprecated &lt;code&gt;expect(...).should&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Explicitly disallow &lt;code&gt;expect { }.not_to change { }&lt;/code&gt; with &lt;code&gt;by&lt;/code&gt;,
&lt;code&gt;by_at_least&lt;/code&gt;, &lt;code&gt;by_at_most&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt;. These have never been supported
but did not raise explicit errors. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Provide &lt;code&gt;===&lt;/code&gt; rather than &lt;code&gt;==&lt;/code&gt; as an alias of &lt;code&gt;matches?&lt;/code&gt; for
all matchers.  The semantics of &lt;code&gt;===&lt;/code&gt; are closer to an RSpec
matcher than &lt;code&gt;==&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove deprecated &lt;code&gt;RSpec::Matchers::OperatorMatcher&lt;/code&gt; constant.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Make &lt;code&gt;RSpec::Expectations::ExpectationNotMetError&lt;/code&gt; subclass
&lt;code&gt;Exception&lt;/code&gt; rather than &lt;code&gt;StandardError&lt;/code&gt; so they can bypass
a bare &lt;code&gt;rescue&lt;/code&gt; in end-user code (e.g. when an expectation is
set from within a rspec-mocks stub implementation). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove Test::Unit and Minitest 4.x integration. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplify the failure message of the &lt;code&gt;be&lt;/code&gt; matcher when matching against:
&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Update matcher protocol and custom matcher DSL to better align
with the newer &lt;code&gt;expect&lt;/code&gt; syntax. If you want your matchers to
maintain compatibility with multiple versions of RSpec, you can
alias the new names to the old. (Myron Marston)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;failure_message_for_should&lt;/code&gt; =&amp;gt; &lt;code&gt;failure_message&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;failure_message_for_should_not&lt;/code&gt; =&amp;gt; &lt;code&gt;failure_message_when_negated&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;match_for_should&lt;/code&gt; =&amp;gt; &lt;code&gt;match&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;match_for_should_not&lt;/code&gt; =&amp;gt; &lt;code&gt;match_when_negated&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improve generated descriptions from &lt;code&gt;change&lt;/code&gt; matcher. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add support for compound matcher expressions using &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;.
Simply chain them off of any existing matcher to create an expression
like &lt;code&gt;expect(alphabet).to start_with("a").and end_with("z")&lt;/code&gt;.
(Eloy Espinaco)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;contain_exactly&lt;/code&gt; as a less ambiguous version of &lt;code&gt;match_array&lt;/code&gt;.
Note that it expects the expected array to be splatted as
individual args: &lt;code&gt;expect(array).to contain_exactly(1, 2)&lt;/code&gt; is
the same as &lt;code&gt;expect(array).to match_array([1, 2])&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Update &lt;code&gt;contain_exactly&lt;/code&gt;/&lt;code&gt;match_array&lt;/code&gt; so that it can match against
other non-array collections (such as a &lt;code&gt;Set&lt;/code&gt;). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Update built-in matchers so that they can accept matchers as arguments
to allow you to compose matchers in arbitrary ways. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Matchers::Composable&lt;/code&gt; mixin that can be used to make
a custom matcher composable as well. Note that custom matchers
defined via &lt;code&gt;RSpec::Matchers.define&lt;/code&gt; already have this. (Myron
Marston)&lt;/li&gt;
  &lt;li&gt;Define noun-phrase aliases for built-in matchers, which can be
used when creating composed matcher expressions that read better
and provide better failure messages. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Machers.alias_matcher&lt;/code&gt; so users can define their own
matcher aliases. The &lt;code&gt;description&lt;/code&gt; of the matcher will reflect the
alternate matcher name. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add explicit &lt;code&gt;be_between&lt;/code&gt; matcher. &lt;code&gt;be_between&lt;/code&gt; has worked for a
long time as a dynamic predicate matcher, but the failure message
was suboptimal. The new matcher provides a much better failure
message. (Erik Michaels-Ober)&lt;/li&gt;
  &lt;li&gt;Enhance the &lt;code&gt;be_between&lt;/code&gt; matcher to allow for &lt;code&gt;inclusive&lt;/code&gt; or &lt;code&gt;exclusive&lt;/code&gt;
comparison (e.g. inclusive of min/max or exclusive of min/max).
(Pedro Gimenez)&lt;/li&gt;
  &lt;li&gt;Make failure message for &lt;code&gt;not_to be #{operator}&lt;/code&gt; less confusing by
only saying it's confusing when comparison operators are used.
(Prathamesh Sonpatki)&lt;/li&gt;
  &lt;li&gt;Improve failure message of &lt;code&gt;eq&lt;/code&gt; matcher when &lt;code&gt;Time&lt;/code&gt; or &lt;code&gt;DateTime&lt;/code&gt;
objects are used so that the full sub-second precision is included.
(Thomas Holmes, Jeff Wallace)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;output&lt;/code&gt; matcher for expecting that a block outputs &lt;code&gt;to_stdout&lt;/code&gt;
or &lt;code&gt;to_stderr&lt;/code&gt;. (Luca Pette, Matthias GÃ¼nther)&lt;/li&gt;
  &lt;li&gt;Forward a provided block on to the &lt;code&gt;has_xyz?&lt;/code&gt; method call when
the &lt;code&gt;have_xyz&lt;/code&gt; matcher is used. (Damian Galarza)&lt;/li&gt;
  &lt;li&gt;Provide integration with Minitest 5.x. Require
&lt;code&gt;rspec/expectations/minitest_integration&lt;/code&gt; after loading minitest
to use rspec-expectations with minitest. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix wrong matcher descriptions with falsey expected value (yujinakayama)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;expect { }.not_to change { }.from(x)&lt;/code&gt; so that the matcher only
passes if the starting value is &lt;code&gt;x&lt;/code&gt;. (Tyler Rick, Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix hash diffing, so that it colorizes properly and doesn't consider trailing
commas when performing the diff. (Jared Norman)&lt;/li&gt;
  &lt;li&gt;Fix built-in matchers to fail normally rather than raising
&lt;code&gt;ArgumentError&lt;/code&gt; when given an object of the wrong type to match
against, so that they work well in composite matcher expressions like
&lt;code&gt;expect([1.51, "foo"]).to include(a_string_matching(/foo/), a_value_within(0.1).of(1.5))&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retain support for RSpec 2 matcher protocol (e.g. for matchers
in 3rd party extension gems like &lt;code&gt;shoulda&lt;/code&gt;), but it will print
a deprecation warning. (Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-2990beta2"&gt;rspec-mocks 2.99.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v2.99.0.beta1...v2.99.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecate &lt;code&gt;RSpec::Mocks::Mock&lt;/code&gt; in favor of &lt;code&gt;RSpec::Mocks::Double&lt;/code&gt;.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate the &lt;code&gt;host&lt;/code&gt; argument of &lt;code&gt;RSpec::Mocks.setup&lt;/code&gt;. Instead
&lt;code&gt;RSpec::Mocks::ExampleMethods&lt;/code&gt; should be included directly in the scope where
RSpec's mocking capabilities are used. (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Deprecate using any of rspec-mocks' features outside the per-test
lifecycle (e.g. from a &lt;code&gt;before(:all)&lt;/code&gt; hook). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate re-using a test double in another example. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Deprecate &lt;code&gt;and_return { value }&lt;/code&gt; and &lt;code&gt;and_return&lt;/code&gt; without arguments. (Yuji Nakayama)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-300beta2"&gt;rspec-mocks 3.0.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.0.0.beta1...v3.0.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rename &lt;code&gt;RSpec::Mocks::Mock&lt;/code&gt; to &lt;code&gt;RSpec::Mocks::Double&lt;/code&gt;. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Change how to integrate rspec-mocks in other test frameworks. You now
need to include &lt;code&gt;RSpec::Mocks::ExampleMethods&lt;/code&gt; in your test context.
(Myron Marston)&lt;/li&gt;
  &lt;li&gt;Prevent RSpec mocks' doubles and partial doubles from being used outside of
the per-test lifecycle (e.g. from a &lt;code&gt;before(:all)&lt;/code&gt; hook). (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Remove the &lt;code&gt;host&lt;/code&gt; argument of &lt;code&gt;RSpec::Mocks.setup&lt;/code&gt;. Instead
&lt;code&gt;RSpec::Mocks::ExampleMethods&lt;/code&gt; should be included directly in the scope where
RSpec's mocking capabilities are used. (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Make test doubles raise errors if you attempt to use them after they
get reset, to help surface issues when you accidentally retain
references to test doubles and attempt to reuse them in another
example. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Remove support for &lt;code&gt;and_return { value }&lt;/code&gt; and &lt;code&gt;and_return&lt;/code&gt; without arguments. (Yuji Nakayama)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;receive_message_chain&lt;/code&gt; which provides the functionality of the old
&lt;code&gt;stub_chain&lt;/code&gt; for the new allow/expect syntax. Use it like so: &lt;code&gt;allow(...).to
receive_message_chain(:foo, :bar, :bazz)&lt;/code&gt;. (Sam Phippen).&lt;/li&gt;
  &lt;li&gt;Change argument matchers to use &lt;code&gt;===&lt;/code&gt; as their primary matching
protocol, since their semantics mirror that of a case or rescue statement
(which uses &lt;code&gt;===&lt;/code&gt; for matching). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Mocks.with_temporary_scope&lt;/code&gt;, which allows you to create
temporary rspec-mocks scopes in arbitrary places (such as a
&lt;code&gt;before(:all)&lt;/code&gt; hook). (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Support keyword arguments when checking arity with verifying doubles.
(Xavier Shay)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix regression in 3.0.0.beta1 that caused &lt;code&gt;double("string_name" =&amp;gt; :value)&lt;/code&gt;
to stop working. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Fix the way rspec-mocks and rspec-core interact so that if users
define a &lt;code&gt;let&lt;/code&gt; with the same name as one of the methods
from &lt;code&gt;RSpec::Mocks::ArgumentMatchers&lt;/code&gt;, the user's &lt;code&gt;let&lt;/code&gt; takes
precedence. (Michi Huber, Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix verified doubles so that their methods match the visibility
(public, protected or private) of the interface they verify
against. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix verified null object doubles so that they do not wrongly
report that they respond to anything. They only respond to methods
available on the interface they verify against. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix deprecation warning for use of old &lt;code&gt;:should&lt;/code&gt; syntax w/o explicit
config so that it no longer is silenced by an extension gem such
as rspec-rails when it calls &lt;code&gt;config.add_stub_and_should_receive_to&lt;/code&gt;.
(Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;expect&lt;/code&gt; syntax so that it does not wrongly emit a "You're
overriding a previous implementation for this stub" warning when
you are not actually doing that. (Myron Marston)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;any_instance.unstub&lt;/code&gt; when used on sub classes for whom the super
class has had &lt;code&gt;any_instance.stub&lt;/code&gt; invoked on. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Fix regression in &lt;code&gt;stub_chain&lt;/code&gt;/&lt;code&gt;receive_message_chain&lt;/code&gt; that caused
it to raise an &lt;code&gt;ArgumentError&lt;/code&gt; when passing args to the stubbed
methods. (Sam Phippen)&lt;/li&gt;
  &lt;li&gt;Correct stub of undefined parent modules all the way down when stubbing a
nested constant. (Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Raise &lt;code&gt;VerifyingDoubleNotDefinedError&lt;/code&gt; when a constant is not defined for
a verifying class double. (MaurÃ­cio Linhares)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;Double#to_str&lt;/code&gt;, which caused confusing &lt;code&gt;raise some_double&lt;/code&gt;
behavior. (MaurÃ­cio Linhares)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-2990beta2"&gt;rspec-rails 2.99.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v2.99.0.beta1...v2.99.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deprecations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deprecates the &lt;code&gt;--webrat&lt;/code&gt; option to the scaffold and request spec generator (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Deprecates the use of &lt;code&gt;Capybara::DSL&lt;/code&gt; (e.g., &lt;code&gt;visit&lt;/code&gt;) in controller specs.
It is more appropriate to use capybara in feature specs (&lt;code&gt;spec/features&lt;/code&gt;)
instead. (Andy Lindeman)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;__send__&lt;/code&gt; rather than &lt;code&gt;send&lt;/code&gt; to prevent naming collisions (Bradley Schaefer)&lt;/li&gt;
  &lt;li&gt;Supports Rails 4.1. (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Loads ActiveSupport properly to support changes in Rails 4.1. (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Anonymous controllers inherit from &lt;code&gt;ActionController::Base&lt;/code&gt; if &lt;code&gt;ApplicationController&lt;/code&gt;
is not present. (Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-300beta2"&gt;rspec-rails 3.0.0.beta2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.0.0.beta1...v3.0.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Breaking Changes for 3.0.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Removes the &lt;code&gt;--webrat&lt;/code&gt; option for the request spec generator (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Methods from &lt;code&gt;Capybara::DSL&lt;/code&gt; (e.g., &lt;code&gt;visit&lt;/code&gt;) are no longer available in
controller specs. It is more appropriate to use capybara in feature specs
(&lt;code&gt;spec/features&lt;/code&gt;) instead. (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;infer_base_class_for_anonymous_controllers&lt;/code&gt; is
enabled by default. (Thomas Holmes)&lt;/li&gt;
  &lt;li&gt;Capybara 2.2.0 or above is required for feature specs. (Andy Lindeman)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve &lt;code&gt;be_valid&lt;/code&gt; matcher for non-ActiveModel::Errors implementations (Ben Hamill)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;__send__&lt;/code&gt; rather than &lt;code&gt;send&lt;/code&gt; to prevent naming collisions (Bradley Schaefer)&lt;/li&gt;
  &lt;li&gt;Supports Rails 4.1. (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Routes are drawn correctly for anonymous controllers with abstract
parents. (Billy Chan)&lt;/li&gt;
  &lt;li&gt;Loads ActiveSupport properly to support changes in Rails 4.1. (Andy Lindeman)&lt;/li&gt;
  &lt;li&gt;Anonymous controllers inherit from &lt;code&gt;ActionController::Base&lt;/code&gt; if &lt;code&gt;ApplicationController&lt;/code&gt;
is not present. (Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Require &lt;code&gt;rspec/collection_matchers&lt;/code&gt; when &lt;code&gt;rspec/rails&lt;/code&gt; is required. (Yuji Nakayama)&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
